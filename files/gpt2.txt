def @main(%input_ids: Tensor[(1, 512), int64] /* ty=Tensor[(1, 512), int64] span=/transformer/Reshape.input_ids:0:0 */, %transformer.wte.weight: Tensor[(50257, 768), float32] /* ty=Tensor[(50257, 768), float32] span=/transformer/wte/Gather.transformer.wte.weight:0:0 */, %transformer.wpe.weight: Tensor[(1024, 768), float32] /* ty=Tensor[(1024, 768), float32] span=/transformer/wpe/Gather.transformer.wpe.weight:0:0 */, %transformer.h.0.ln_1.weight: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.0/ln_1/LayerNormalization.transformer.h.0.ln_1.weight:0:0 */, %transformer.h.0.ln_1.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.0/ln_1/LayerNormalization.transformer.h.0.ln_1.bias:0:0 */, %transformer.h.0.attn.c_attn.weight: Tensor[(768, 2304), float32] /* ty=Tensor[(768, 2304), float32] span=/transformer/h.0/attn/c_attn/Gemm.transformer.h.0.attn.c_attn.weight:0:0 */, %transformer.h.0.attn.c_attn.bias: Tensor[(2304), float32] /* ty=Tensor[(2304), float32] span=/transformer/h.0/attn/c_attn/Gemm.transformer.h.0.attn.c_attn.bias:0:0 */, %transformer.h.0.attn.c_proj.weight: Tensor[(768, 768), float32] /* ty=Tensor[(768, 768), float32] span=/transformer/h.0/attn/c_proj/Gemm.transformer.h.0.attn.c_proj.weight:0:0 */, %transformer.h.0.attn.c_proj.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.0/attn/c_proj/Gemm.transformer.h.0.attn.c_proj.bias:0:0 */, %transformer.h.0.ln_2.weight: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.0/ln_2/LayerNormalization.transformer.h.0.ln_2.weight:0:0 */, %transformer.h.0.ln_2.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.0/ln_2/LayerNormalization.transformer.h.0.ln_2.bias:0:0 */, %transformer.h.0.mlp.c_fc.weight: Tensor[(768, 3072), float32] /* ty=Tensor[(768, 3072), float32] span=/transformer/h.0/mlp/c_fc/Gemm.transformer.h.0.mlp.c_fc.weight:0:0 */, %transformer.h.0.mlp.c_fc.bias: Tensor[(3072), float32] /* ty=Tensor[(3072), float32] span=/transformer/h.0/mlp/c_fc/Gemm.transformer.h.0.mlp.c_fc.bias:0:0 */, %transformer.h.0.mlp.c_proj.weight: Tensor[(3072, 768), float32] /* ty=Tensor[(3072, 768), float32] span=/transformer/h.0/mlp/c_proj/Gemm.transformer.h.0.mlp.c_proj.weight:0:0 */, %transformer.h.0.mlp.c_proj.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.0/mlp/c_proj/Gemm.transformer.h.0.mlp.c_proj.bias:0:0 */, %transformer.h.1.ln_1.weight: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.1/ln_1/LayerNormalization.transformer.h.1.ln_1.weight:0:0 */, %transformer.h.1.ln_1.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.1/ln_1/LayerNormalization.transformer.h.1.ln_1.bias:0:0 */, %transformer.h.1.attn.c_attn.weight: Tensor[(768, 2304), float32] /* ty=Tensor[(768, 2304), float32] span=/transformer/h.1/attn/c_attn/Gemm.transformer.h.1.attn.c_attn.weight:0:0 */, %transformer.h.1.attn.c_attn.bias: Tensor[(2304), float32] /* ty=Tensor[(2304), float32] span=/transformer/h.1/attn/c_attn/Gemm.transformer.h.1.attn.c_attn.bias:0:0 */, %transformer.h.1.attn.c_proj.weight: Tensor[(768, 768), float32] /* ty=Tensor[(768, 768), float32] span=/transformer/h.1/attn/c_proj/Gemm.transformer.h.1.attn.c_proj.weight:0:0 */, %transformer.h.1.attn.c_proj.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.1/attn/c_proj/Gemm.transformer.h.1.attn.c_proj.bias:0:0 */, %transformer.h.1.ln_2.weight: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.1/ln_2/LayerNormalization.transformer.h.1.ln_2.weight:0:0 */, %transformer.h.1.ln_2.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.1/ln_2/LayerNormalization.transformer.h.1.ln_2.bias:0:0 */, %transformer.h.1.mlp.c_fc.weight: Tensor[(768, 3072), float32] /* ty=Tensor[(768, 3072), float32] span=/transformer/h.1/mlp/c_fc/Gemm.transformer.h.1.mlp.c_fc.weight:0:0 */, %transformer.h.1.mlp.c_fc.bias: Tensor[(3072), float32] /* ty=Tensor[(3072), float32] span=/transformer/h.1/mlp/c_fc/Gemm.transformer.h.1.mlp.c_fc.bias:0:0 */, %transformer.h.1.mlp.c_proj.weight: Tensor[(3072, 768), float32] /* ty=Tensor[(3072, 768), float32] span=/transformer/h.1/mlp/c_proj/Gemm.transformer.h.1.mlp.c_proj.weight:0:0 */, %transformer.h.1.mlp.c_proj.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.1/mlp/c_proj/Gemm.transformer.h.1.mlp.c_proj.bias:0:0 */, %transformer.h.2.ln_1.weight: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.2/ln_1/LayerNormalization.transformer.h.2.ln_1.weight:0:0 */, %transformer.h.2.ln_1.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.2/ln_1/LayerNormalization.transformer.h.2.ln_1.bias:0:0 */, %transformer.h.2.attn.c_attn.weight: Tensor[(768, 2304), float32] /* ty=Tensor[(768, 2304), float32] span=/transformer/h.2/attn/c_attn/Gemm.transformer.h.2.attn.c_attn.weight:0:0 */, %transformer.h.2.attn.c_attn.bias: Tensor[(2304), float32] /* ty=Tensor[(2304), float32] span=/transformer/h.2/attn/c_attn/Gemm.transformer.h.2.attn.c_attn.bias:0:0 */, %transformer.h.2.attn.c_proj.weight: Tensor[(768, 768), float32] /* ty=Tensor[(768, 768), float32] span=/transformer/h.2/attn/c_proj/Gemm.transformer.h.2.attn.c_proj.weight:0:0 */, %transformer.h.2.attn.c_proj.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.2/attn/c_proj/Gemm.transformer.h.2.attn.c_proj.bias:0:0 */, %transformer.h.2.ln_2.weight: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.2/ln_2/LayerNormalization.transformer.h.2.ln_2.weight:0:0 */, %transformer.h.2.ln_2.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.2/ln_2/LayerNormalization.transformer.h.2.ln_2.bias:0:0 */, %transformer.h.2.mlp.c_fc.weight: Tensor[(768, 3072), float32] /* ty=Tensor[(768, 3072), float32] span=/transformer/h.2/mlp/c_fc/Gemm.transformer.h.2.mlp.c_fc.weight:0:0 */, %transformer.h.2.mlp.c_fc.bias: Tensor[(3072), float32] /* ty=Tensor[(3072), float32] span=/transformer/h.2/mlp/c_fc/Gemm.transformer.h.2.mlp.c_fc.bias:0:0 */, %transformer.h.2.mlp.c_proj.weight: Tensor[(3072, 768), float32] /* ty=Tensor[(3072, 768), float32] span=/transformer/h.2/mlp/c_proj/Gemm.transformer.h.2.mlp.c_proj.weight:0:0 */, %transformer.h.2.mlp.c_proj.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.2/mlp/c_proj/Gemm.transformer.h.2.mlp.c_proj.bias:0:0 */, %transformer.h.3.ln_1.weight: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.3/ln_1/LayerNormalization.transformer.h.3.ln_1.weight:0:0 */, %transformer.h.3.ln_1.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.3/ln_1/LayerNormalization.transformer.h.3.ln_1.bias:0:0 */, %transformer.h.3.attn.c_attn.weight: Tensor[(768, 2304), float32] /* ty=Tensor[(768, 2304), float32] span=/transformer/h.3/attn/c_attn/Gemm.transformer.h.3.attn.c_attn.weight:0:0 */, %transformer.h.3.attn.c_attn.bias: Tensor[(2304), float32] /* ty=Tensor[(2304), float32] span=/transformer/h.3/attn/c_attn/Gemm.transformer.h.3.attn.c_attn.bias:0:0 */, %transformer.h.3.attn.c_proj.weight: Tensor[(768, 768), float32] /* ty=Tensor[(768, 768), float32] span=/transformer/h.3/attn/c_proj/Gemm.transformer.h.3.attn.c_proj.weight:0:0 */, %transformer.h.3.attn.c_proj.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.3/attn/c_proj/Gemm.transformer.h.3.attn.c_proj.bias:0:0 */, %transformer.h.3.ln_2.weight: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.3/ln_2/LayerNormalization.transformer.h.3.ln_2.weight:0:0 */, %transformer.h.3.ln_2.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.3/ln_2/LayerNormalization.transformer.h.3.ln_2.bias:0:0 */, %transformer.h.3.mlp.c_fc.weight: Tensor[(768, 3072), float32] /* ty=Tensor[(768, 3072), float32] span=/transformer/h.3/mlp/c_fc/Gemm.transformer.h.3.mlp.c_fc.weight:0:0 */, %transformer.h.3.mlp.c_fc.bias: Tensor[(3072), float32] /* ty=Tensor[(3072), float32] span=/transformer/h.3/mlp/c_fc/Gemm.transformer.h.3.mlp.c_fc.bias:0:0 */, %transformer.h.3.mlp.c_proj.weight: Tensor[(3072, 768), float32] /* ty=Tensor[(3072, 768), float32] span=/transformer/h.3/mlp/c_proj/Gemm.transformer.h.3.mlp.c_proj.weight:0:0 */, %transformer.h.3.mlp.c_proj.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.3/mlp/c_proj/Gemm.transformer.h.3.mlp.c_proj.bias:0:0 */, %transformer.h.4.ln_1.weight: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.4/ln_1/LayerNormalization.transformer.h.4.ln_1.weight:0:0 */, %transformer.h.4.ln_1.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.4/ln_1/LayerNormalization.transformer.h.4.ln_1.bias:0:0 */, %transformer.h.4.attn.c_attn.weight: Tensor[(768, 2304), float32] /* ty=Tensor[(768, 2304), float32] span=/transformer/h.4/attn/c_attn/Gemm.transformer.h.4.attn.c_attn.weight:0:0 */, %transformer.h.4.attn.c_attn.bias: Tensor[(2304), float32] /* ty=Tensor[(2304), float32] span=/transformer/h.4/attn/c_attn/Gemm.transformer.h.4.attn.c_attn.bias:0:0 */, %transformer.h.4.attn.c_proj.weight: Tensor[(768, 768), float32] /* ty=Tensor[(768, 768), float32] span=/transformer/h.4/attn/c_proj/Gemm.transformer.h.4.attn.c_proj.weight:0:0 */, %transformer.h.4.attn.c_proj.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.4/attn/c_proj/Gemm.transformer.h.4.attn.c_proj.bias:0:0 */, %transformer.h.4.ln_2.weight: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.4/ln_2/LayerNormalization.transformer.h.4.ln_2.weight:0:0 */, %transformer.h.4.ln_2.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.4/ln_2/LayerNormalization.transformer.h.4.ln_2.bias:0:0 */, %transformer.h.4.mlp.c_fc.weight: Tensor[(768, 3072), float32] /* ty=Tensor[(768, 3072), float32] span=/transformer/h.4/mlp/c_fc/Gemm.transformer.h.4.mlp.c_fc.weight:0:0 */, %transformer.h.4.mlp.c_fc.bias: Tensor[(3072), float32] /* ty=Tensor[(3072), float32] span=/transformer/h.4/mlp/c_fc/Gemm.transformer.h.4.mlp.c_fc.bias:0:0 */, %transformer.h.4.mlp.c_proj.weight: Tensor[(3072, 768), float32] /* ty=Tensor[(3072, 768), float32] span=/transformer/h.4/mlp/c_proj/Gemm.transformer.h.4.mlp.c_proj.weight:0:0 */, %transformer.h.4.mlp.c_proj.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.4/mlp/c_proj/Gemm.transformer.h.4.mlp.c_proj.bias:0:0 */, %transformer.h.5.ln_1.weight: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.5/ln_1/LayerNormalization.transformer.h.5.ln_1.weight:0:0 */, %transformer.h.5.ln_1.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.5/ln_1/LayerNormalization.transformer.h.5.ln_1.bias:0:0 */, %transformer.h.5.attn.c_attn.weight: Tensor[(768, 2304), float32] /* ty=Tensor[(768, 2304), float32] span=/transformer/h.5/attn/c_attn/Gemm.transformer.h.5.attn.c_attn.weight:0:0 */, %transformer.h.5.attn.c_attn.bias: Tensor[(2304), float32] /* ty=Tensor[(2304), float32] span=/transformer/h.5/attn/c_attn/Gemm.transformer.h.5.attn.c_attn.bias:0:0 */, %transformer.h.5.attn.c_proj.weight: Tensor[(768, 768), float32] /* ty=Tensor[(768, 768), float32] span=/transformer/h.5/attn/c_proj/Gemm.transformer.h.5.attn.c_proj.weight:0:0 */, %transformer.h.5.attn.c_proj.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.5/attn/c_proj/Gemm.transformer.h.5.attn.c_proj.bias:0:0 */, %transformer.h.5.ln_2.weight: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.5/ln_2/LayerNormalization.transformer.h.5.ln_2.weight:0:0 */, %transformer.h.5.ln_2.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.5/ln_2/LayerNormalization.transformer.h.5.ln_2.bias:0:0 */, %transformer.h.5.mlp.c_fc.weight: Tensor[(768, 3072), float32] /* ty=Tensor[(768, 3072), float32] span=/transformer/h.5/mlp/c_fc/Gemm.transformer.h.5.mlp.c_fc.weight:0:0 */, %transformer.h.5.mlp.c_fc.bias: Tensor[(3072), float32] /* ty=Tensor[(3072), float32] span=/transformer/h.5/mlp/c_fc/Gemm.transformer.h.5.mlp.c_fc.bias:0:0 */, %transformer.h.5.mlp.c_proj.weight: Tensor[(3072, 768), float32] /* ty=Tensor[(3072, 768), float32] span=/transformer/h.5/mlp/c_proj/Gemm.transformer.h.5.mlp.c_proj.weight:0:0 */, %transformer.h.5.mlp.c_proj.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.5/mlp/c_proj/Gemm.transformer.h.5.mlp.c_proj.bias:0:0 */, %transformer.h.6.ln_1.weight: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.6/ln_1/LayerNormalization.transformer.h.6.ln_1.weight:0:0 */, %transformer.h.6.ln_1.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.6/ln_1/LayerNormalization.transformer.h.6.ln_1.bias:0:0 */, %transformer.h.6.attn.c_attn.weight: Tensor[(768, 2304), float32] /* ty=Tensor[(768, 2304), float32] span=/transformer/h.6/attn/c_attn/Gemm.transformer.h.6.attn.c_attn.weight:0:0 */, %transformer.h.6.attn.c_attn.bias: Tensor[(2304), float32] /* ty=Tensor[(2304), float32] span=/transformer/h.6/attn/c_attn/Gemm.transformer.h.6.attn.c_attn.bias:0:0 */, %transformer.h.6.attn.c_proj.weight: Tensor[(768, 768), float32] /* ty=Tensor[(768, 768), float32] span=/transformer/h.6/attn/c_proj/Gemm.transformer.h.6.attn.c_proj.weight:0:0 */, %transformer.h.6.attn.c_proj.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.6/attn/c_proj/Gemm.transformer.h.6.attn.c_proj.bias:0:0 */, %transformer.h.6.ln_2.weight: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.6/ln_2/LayerNormalization.transformer.h.6.ln_2.weight:0:0 */, %transformer.h.6.ln_2.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.6/ln_2/LayerNormalization.transformer.h.6.ln_2.bias:0:0 */, %transformer.h.6.mlp.c_fc.weight: Tensor[(768, 3072), float32] /* ty=Tensor[(768, 3072), float32] span=/transformer/h.6/mlp/c_fc/Gemm.transformer.h.6.mlp.c_fc.weight:0:0 */, %transformer.h.6.mlp.c_fc.bias: Tensor[(3072), float32] /* ty=Tensor[(3072), float32] span=/transformer/h.6/mlp/c_fc/Gemm.transformer.h.6.mlp.c_fc.bias:0:0 */, %transformer.h.6.mlp.c_proj.weight: Tensor[(3072, 768), float32] /* ty=Tensor[(3072, 768), float32] span=/transformer/h.6/mlp/c_proj/Gemm.transformer.h.6.mlp.c_proj.weight:0:0 */, %transformer.h.6.mlp.c_proj.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.6/mlp/c_proj/Gemm.transformer.h.6.mlp.c_proj.bias:0:0 */, %transformer.h.7.ln_1.weight: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.7/ln_1/LayerNormalization.transformer.h.7.ln_1.weight:0:0 */, %transformer.h.7.ln_1.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.7/ln_1/LayerNormalization.transformer.h.7.ln_1.bias:0:0 */, %transformer.h.7.attn.c_attn.weight: Tensor[(768, 2304), float32] /* ty=Tensor[(768, 2304), float32] span=/transformer/h.7/attn/c_attn/Gemm.transformer.h.7.attn.c_attn.weight:0:0 */, %transformer.h.7.attn.c_attn.bias: Tensor[(2304), float32] /* ty=Tensor[(2304), float32] span=/transformer/h.7/attn/c_attn/Gemm.transformer.h.7.attn.c_attn.bias:0:0 */, %transformer.h.7.attn.c_proj.weight: Tensor[(768, 768), float32] /* ty=Tensor[(768, 768), float32] span=/transformer/h.7/attn/c_proj/Gemm.transformer.h.7.attn.c_proj.weight:0:0 */, %transformer.h.7.attn.c_proj.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.7/attn/c_proj/Gemm.transformer.h.7.attn.c_proj.bias:0:0 */, %transformer.h.7.ln_2.weight: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.7/ln_2/LayerNormalization.transformer.h.7.ln_2.weight:0:0 */, %transformer.h.7.ln_2.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.7/ln_2/LayerNormalization.transformer.h.7.ln_2.bias:0:0 */, %transformer.h.7.mlp.c_fc.weight: Tensor[(768, 3072), float32] /* ty=Tensor[(768, 3072), float32] span=/transformer/h.7/mlp/c_fc/Gemm.transformer.h.7.mlp.c_fc.weight:0:0 */, %transformer.h.7.mlp.c_fc.bias: Tensor[(3072), float32] /* ty=Tensor[(3072), float32] span=/transformer/h.7/mlp/c_fc/Gemm.transformer.h.7.mlp.c_fc.bias:0:0 */, %transformer.h.7.mlp.c_proj.weight: Tensor[(3072, 768), float32] /* ty=Tensor[(3072, 768), float32] span=/transformer/h.7/mlp/c_proj/Gemm.transformer.h.7.mlp.c_proj.weight:0:0 */, %transformer.h.7.mlp.c_proj.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.7/mlp/c_proj/Gemm.transformer.h.7.mlp.c_proj.bias:0:0 */, %transformer.h.8.ln_1.weight: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.8/ln_1/LayerNormalization.transformer.h.8.ln_1.weight:0:0 */, %transformer.h.8.ln_1.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.8/ln_1/LayerNormalization.transformer.h.8.ln_1.bias:0:0 */, %transformer.h.8.attn.c_attn.weight: Tensor[(768, 2304), float32] /* ty=Tensor[(768, 2304), float32] span=/transformer/h.8/attn/c_attn/Gemm.transformer.h.8.attn.c_attn.weight:0:0 */, %transformer.h.8.attn.c_attn.bias: Tensor[(2304), float32] /* ty=Tensor[(2304), float32] span=/transformer/h.8/attn/c_attn/Gemm.transformer.h.8.attn.c_attn.bias:0:0 */, %transformer.h.8.attn.c_proj.weight: Tensor[(768, 768), float32] /* ty=Tensor[(768, 768), float32] span=/transformer/h.8/attn/c_proj/Gemm.transformer.h.8.attn.c_proj.weight:0:0 */, %transformer.h.8.attn.c_proj.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.8/attn/c_proj/Gemm.transformer.h.8.attn.c_proj.bias:0:0 */, %transformer.h.8.ln_2.weight: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.8/ln_2/LayerNormalization.transformer.h.8.ln_2.weight:0:0 */, %transformer.h.8.ln_2.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.8/ln_2/LayerNormalization.transformer.h.8.ln_2.bias:0:0 */, %transformer.h.8.mlp.c_fc.weight: Tensor[(768, 3072), float32] /* ty=Tensor[(768, 3072), float32] span=/transformer/h.8/mlp/c_fc/Gemm.transformer.h.8.mlp.c_fc.weight:0:0 */, %transformer.h.8.mlp.c_fc.bias: Tensor[(3072), float32] /* ty=Tensor[(3072), float32] span=/transformer/h.8/mlp/c_fc/Gemm.transformer.h.8.mlp.c_fc.bias:0:0 */, %transformer.h.8.mlp.c_proj.weight: Tensor[(3072, 768), float32] /* ty=Tensor[(3072, 768), float32] span=/transformer/h.8/mlp/c_proj/Gemm.transformer.h.8.mlp.c_proj.weight:0:0 */, %transformer.h.8.mlp.c_proj.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.8/mlp/c_proj/Gemm.transformer.h.8.mlp.c_proj.bias:0:0 */, %transformer.h.9.ln_1.weight: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.9/ln_1/LayerNormalization.transformer.h.9.ln_1.weight:0:0 */, %transformer.h.9.ln_1.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.9/ln_1/LayerNormalization.transformer.h.9.ln_1.bias:0:0 */, %transformer.h.9.attn.c_attn.weight: Tensor[(768, 2304), float32] /* ty=Tensor[(768, 2304), float32] span=/transformer/h.9/attn/c_attn/Gemm.transformer.h.9.attn.c_attn.weight:0:0 */, %transformer.h.9.attn.c_attn.bias: Tensor[(2304), float32] /* ty=Tensor[(2304), float32] span=/transformer/h.9/attn/c_attn/Gemm.transformer.h.9.attn.c_attn.bias:0:0 */, %transformer.h.9.attn.c_proj.weight: Tensor[(768, 768), float32] /* ty=Tensor[(768, 768), float32] span=/transformer/h.9/attn/c_proj/Gemm.transformer.h.9.attn.c_proj.weight:0:0 */, %transformer.h.9.attn.c_proj.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.9/attn/c_proj/Gemm.transformer.h.9.attn.c_proj.bias:0:0 */, %transformer.h.9.ln_2.weight: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.9/ln_2/LayerNormalization.transformer.h.9.ln_2.weight:0:0 */, %transformer.h.9.ln_2.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.9/ln_2/LayerNormalization.transformer.h.9.ln_2.bias:0:0 */, %transformer.h.9.mlp.c_fc.weight: Tensor[(768, 3072), float32] /* ty=Tensor[(768, 3072), float32] span=/transformer/h.9/mlp/c_fc/Gemm.transformer.h.9.mlp.c_fc.weight:0:0 */, %transformer.h.9.mlp.c_fc.bias: Tensor[(3072), float32] /* ty=Tensor[(3072), float32] span=/transformer/h.9/mlp/c_fc/Gemm.transformer.h.9.mlp.c_fc.bias:0:0 */, %transformer.h.9.mlp.c_proj.weight: Tensor[(3072, 768), float32] /* ty=Tensor[(3072, 768), float32] span=/transformer/h.9/mlp/c_proj/Gemm.transformer.h.9.mlp.c_proj.weight:0:0 */, %transformer.h.9.mlp.c_proj.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.9/mlp/c_proj/Gemm.transformer.h.9.mlp.c_proj.bias:0:0 */, %transformer.h.10.ln_1.weight: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.10/ln_1/LayerNormalization.transformer.h.10.ln_1.weight:0:0 */, %transformer.h.10.ln_1.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.10/ln_1/LayerNormalization.transformer.h.10.ln_1.bias:0:0 */, %transformer.h.10.attn.c_attn.weight: Tensor[(768, 2304), float32] /* ty=Tensor[(768, 2304), float32] span=/transformer/h.10/attn/c_attn/Gemm.transformer.h.10.attn.c_attn.weight:0:0 */, %transformer.h.10.attn.c_attn.bias: Tensor[(2304), float32] /* ty=Tensor[(2304), float32] span=/transformer/h.10/attn/c_attn/Gemm.transformer.h.10.attn.c_attn.bias:0:0 */, %transformer.h.10.attn.c_proj.weight: Tensor[(768, 768), float32] /* ty=Tensor[(768, 768), float32] span=/transformer/h.10/attn/c_proj/Gemm.transformer.h.10.attn.c_proj.weight:0:0 */, %transformer.h.10.attn.c_proj.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.10/attn/c_proj/Gemm.transformer.h.10.attn.c_proj.bias:0:0 */, %transformer.h.10.ln_2.weight: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.10/ln_2/LayerNormalization.transformer.h.10.ln_2.weight:0:0 */, %transformer.h.10.ln_2.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.10/ln_2/LayerNormalization.transformer.h.10.ln_2.bias:0:0 */, %transformer.h.10.mlp.c_fc.weight: Tensor[(768, 3072), float32] /* ty=Tensor[(768, 3072), float32] span=/transformer/h.10/mlp/c_fc/Gemm.transformer.h.10.mlp.c_fc.weight:0:0 */, %transformer.h.10.mlp.c_fc.bias: Tensor[(3072), float32] /* ty=Tensor[(3072), float32] span=/transformer/h.10/mlp/c_fc/Gemm.transformer.h.10.mlp.c_fc.bias:0:0 */, %transformer.h.10.mlp.c_proj.weight: Tensor[(3072, 768), float32] /* ty=Tensor[(3072, 768), float32] span=/transformer/h.10/mlp/c_proj/Gemm.transformer.h.10.mlp.c_proj.weight:0:0 */, %transformer.h.10.mlp.c_proj.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.10/mlp/c_proj/Gemm.transformer.h.10.mlp.c_proj.bias:0:0 */, %transformer.h.11.ln_1.weight: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.11/ln_1/LayerNormalization.transformer.h.11.ln_1.weight:0:0 */, %transformer.h.11.ln_1.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.11/ln_1/LayerNormalization.transformer.h.11.ln_1.bias:0:0 */, %transformer.h.11.attn.c_attn.weight: Tensor[(768, 2304), float32] /* ty=Tensor[(768, 2304), float32] span=/transformer/h.11/attn/c_attn/Gemm.transformer.h.11.attn.c_attn.weight:0:0 */, %transformer.h.11.attn.c_attn.bias: Tensor[(2304), float32] /* ty=Tensor[(2304), float32] span=/transformer/h.11/attn/c_attn/Gemm.transformer.h.11.attn.c_attn.bias:0:0 */, %transformer.h.11.attn.c_proj.weight: Tensor[(768, 768), float32] /* ty=Tensor[(768, 768), float32] span=/transformer/h.11/attn/c_proj/Gemm.transformer.h.11.attn.c_proj.weight:0:0 */, %transformer.h.11.attn.c_proj.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.11/attn/c_proj/Gemm.transformer.h.11.attn.c_proj.bias:0:0 */, %transformer.h.11.ln_2.weight: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.11/ln_2/LayerNormalization.transformer.h.11.ln_2.weight:0:0 */, %transformer.h.11.ln_2.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.11/ln_2/LayerNormalization.transformer.h.11.ln_2.bias:0:0 */, %transformer.h.11.mlp.c_fc.weight: Tensor[(768, 3072), float32] /* ty=Tensor[(768, 3072), float32] span=/transformer/h.11/mlp/c_fc/Gemm.transformer.h.11.mlp.c_fc.weight:0:0 */, %transformer.h.11.mlp.c_fc.bias: Tensor[(3072), float32] /* ty=Tensor[(3072), float32] span=/transformer/h.11/mlp/c_fc/Gemm.transformer.h.11.mlp.c_fc.bias:0:0 */, %transformer.h.11.mlp.c_proj.weight: Tensor[(3072, 768), float32] /* ty=Tensor[(3072, 768), float32] span=/transformer/h.11/mlp/c_proj/Gemm.transformer.h.11.mlp.c_proj.weight:0:0 */, %transformer.h.11.mlp.c_proj.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/h.11/mlp/c_proj/Gemm.transformer.h.11.mlp.c_proj.bias:0:0 */, %transformer.ln_f.weight: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/ln_f/LayerNormalization.transformer.ln_f.weight:0:0 */, %transformer.ln_f.bias: Tensor[(768), float32] /* ty=Tensor[(768), float32] span=/transformer/ln_f/LayerNormalization.transformer.ln_f.bias:0:0 */, %onnx::MatMul_2714: Tensor[(768, 50257), float32] /* ty=Tensor[(768, 50257), float32] span=/lm_head/MatMul.onnx::MatMul_2714:0:0 */) -> (Tensor[(1, 512, 50257), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32]) {
  %0 = reshape(%input_ids, newshape=[-1, 512]) /* ty=Tensor[(1, 512), int64] span=/transformer/Reshape:0:0 */;
  %1 = less(%0, 0i64 /* ty=int64 span=/transformer/wte/Gather:0:0 */) /* ty=Tensor[(1, 512), bool] span=/transformer/wte/Gather:0:0 */;
  %2 = add(%0, 50257i64 /* ty=int64 */) /* ty=Tensor[(1, 512), int64] span=/transformer/wte/Gather:0:0 */;
  %3 = where(%1, %2, %0) /* ty=Tensor[(1, 512), int64] span=/transformer/wte/Gather:0:0 */;
  %4 = take(%transformer.wte.weight, %3, axis=0) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/wte/Gather:0:0 */;
  %5 = take(%transformer.wpe.weight, meta[relay.Constant][0] /* ty=Tensor[(1, 512), int64] */, axis=0) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/wpe/Gather:0:0 */;
  %6 = add(%4, %5) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/Add:0:0 */;
  %7 = mean(%6, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.0/ln_1/LayerNormalization:0:0 */;
  %8 = variance(%6, %7, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.0/ln_1/LayerNormalization:0:0 */;
  %9 = add(%8, 1e-05f /* ty=float32 span=/transformer/h.0/ln_1/LayerNormalization:0:0 */) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.0/ln_1/LayerNormalization:0:0 */;
  %10 = sqrt(%9) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.0/ln_1/LayerNormalization:0:0 */;
  %11 = subtract(%6, %7) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.0/ln_1/LayerNormalization:0:0 */;
  %12 = divide(1f /* ty=float32 span=/transformer/h.0/ln_1/LayerNormalization:0:0 */, %10) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.0/ln_1/LayerNormalization:0:0 */;
  %13 = multiply(%11, %12) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.0/ln_1/LayerNormalization:0:0 */;
  %14 = multiply(%13, %transformer.h.0.ln_1.weight) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.0/ln_1/LayerNormalization:0:0 */;
  %15 = add(%14, %transformer.h.0.ln_1.bias) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.0/ln_1/LayerNormalization:0:0 */;
  %16 = reshape(%15, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.0/attn/c_attn/Reshape:0:0 */;
  %17 = transpose(%transformer.h.0.attn.c_attn.weight, axes=[1, 0]) /* ty=Tensor[(2304, 768), float32] span=/transformer/h.0/attn/c_attn/Gemm:0:0 */;
  %18 = nn.dense(%16, %17, units=2304) /* ty=Tensor[(512, 2304), float32] span=/transformer/h.0/attn/c_attn/Gemm:0:0 */;
  %19 = add(%18, %transformer.h.0.attn.c_attn.bias) /* ty=Tensor[(512, 2304), float32] span=/transformer/h.0/attn/c_attn/Gemm:0:0 */;
  %20 = reshape(%19, newshape=[1, 512, 2304]) /* ty=Tensor[(1, 512, 2304), float32] span=/transformer/h.0/attn/c_attn/Reshape_1:0:0 */;
  %21 = split(%20, indices_or_sections=[768i64, 1536i64], axis=2) /* ty=(Tensor[(1, 512, 768), float32], Tensor[(1, 512, 768), float32], Tensor[(1, 512, 768), float32]) span=/transformer/h.0/attn/Split:0:0 */;
  %22 = %21.0 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.0/attn/Split:0:0 */;
  %23 = reshape(%22, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.0/attn/Reshape:0:0 */;
  %24 = transpose(%23, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.0/attn/Transpose:0:0 */;
  %25 = multiply(%24, meta[relay.Constant][1] /* ty=Tensor[(1), float32] span=/transformer/h.0/attn/Sqrt_1:0:0 */) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.0/attn/Mul:0:0 */;
  %26 = %21.1 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.0/attn/Split:0:0 */;
  %27 = reshape(%26, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.0/attn/Reshape_1:0:0 */;
  %28 = transpose(%27, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 512), float32] span=/transformer/h.0/attn/Transpose_3:0:0 */;
  %29 = multiply(%28, meta[relay.Constant][2] /* ty=Tensor[(1), float32] span=/transformer/h.0/attn/Sqrt_2:0:0 */) /* ty=Tensor[(1, 12, 64, 512), float32] span=/transformer/h.0/attn/Mul_1:0:0 */;
  %30 = reshape(%29, newshape=[-1, 64, 512]) /* ty=Tensor[(12, 64, 512), float32] span=/transformer/h.0/attn/MatMul:0:0 */;
  %31 = reshape(%25, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.0/attn/MatMul:0:0 */;
  %32 = transpose(%30, axes=[0, 2, 1]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.0/attn/MatMul:0:0 */;
  %33 = nn.batch_matmul(%31, %32, out_dtype="float32", transpose_b=True) /* ty=Tensor[(12, 512, 512), float32] span=/transformer/h.0/attn/MatMul:0:0 */;
  %34 = reshape(%33, newshape=[1, 12, 512, 512]) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.0/attn/MatMul:0:0 */;
  %35 = add(%34, meta[relay.Constant][3] /* ty=Tensor[(1, 1, 512, 512), float32] span=/transformer/Expand:0:0 */) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.0/attn/Add:0:0 */;
  %36 = nn.softmax(%35, axis=3) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.0/attn/Softmax:0:0 */;
  %37 = %21.2 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.0/attn/Split:0:0 */;
  %38 = reshape(%37, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.0/attn/Reshape_2:0:0 */;
  %39 = transpose(%38, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.0/attn/Transpose_2:0:0 */;
  %40 = reshape(%39, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.0/attn/MatMul_1:0:0 */;
  %41 = reshape(%36, newshape=[-1, 512, 512]) /* ty=Tensor[(12, 512, 512), float32] span=/transformer/h.0/attn/MatMul_1:0:0 */;
  %42 = transpose(%40, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 512), float32] span=/transformer/h.0/attn/MatMul_1:0:0 */;
  %43 = nn.batch_matmul(%41, %42, out_dtype="float32", transpose_b=True) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.0/attn/MatMul_1:0:0 */;
  %44 = reshape(%43, newshape=[1, 12, 512, 64]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.0/attn/MatMul_1:0:0 */;
  %45 = transpose(%44, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.0/attn/Transpose_4:0:0 */;
  %46 = reshape(%45, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.0/attn/Reshape_3:0:0 */;
  %47 = reshape(%46, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.0/attn/c_proj/Reshape:0:0 */;
  %48 = transpose(%transformer.h.0.attn.c_proj.weight, axes=[1, 0]) /* ty=Tensor[(768, 768), float32] span=/transformer/h.0/attn/c_proj/Gemm:0:0 */;
  %49 = nn.dense(%47, %48, units=768) /* ty=Tensor[(512, 768), float32] span=/transformer/h.0/attn/c_proj/Gemm:0:0 */;
  %50 = add(%49, %transformer.h.0.attn.c_proj.bias) /* ty=Tensor[(512, 768), float32] span=/transformer/h.0/attn/c_proj/Gemm:0:0 */;
  %51 = reshape(%50, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.0/attn/c_proj/Reshape_1:0:0 */;
  %52 = add(%51, %6) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.0/Add:0:0 */;
  %53 = mean(%52, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.0/ln_2/LayerNormalization:0:0 */;
  %54 = variance(%52, %53, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.0/ln_2/LayerNormalization:0:0 */;
  %55 = add(%54, 1e-05f /* ty=float32 span=/transformer/h.0/ln_2/LayerNormalization:0:0 */) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.0/ln_2/LayerNormalization:0:0 */;
  %56 = sqrt(%55) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.0/ln_2/LayerNormalization:0:0 */;
  %57 = subtract(%52, %53) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.0/ln_2/LayerNormalization:0:0 */;
  %58 = divide(1f /* ty=float32 span=/transformer/h.0/ln_2/LayerNormalization:0:0 */, %56) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.0/ln_2/LayerNormalization:0:0 */;
  %59 = multiply(%57, %58) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.0/ln_2/LayerNormalization:0:0 */;
  %60 = multiply(%59, %transformer.h.0.ln_2.weight) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.0/ln_2/LayerNormalization:0:0 */;
  %61 = add(%60, %transformer.h.0.ln_2.bias) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.0/ln_2/LayerNormalization:0:0 */;
  %62 = reshape(%61, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.0/mlp/c_fc/Reshape:0:0 */;
  %63 = transpose(%transformer.h.0.mlp.c_fc.weight, axes=[1, 0]) /* ty=Tensor[(3072, 768), float32] span=/transformer/h.0/mlp/c_fc/Gemm:0:0 */;
  %64 = nn.dense(%62, %63, units=3072) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.0/mlp/c_fc/Gemm:0:0 */;
  %65 = add(%64, %transformer.h.0.mlp.c_fc.bias) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.0/mlp/c_fc/Gemm:0:0 */;
  %66 = reshape(%65, newshape=[1, 512, 3072]) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.0/mlp/c_fc/Reshape_1:0:0 */;
  %67 = power(%66, 3f /* ty=float32 span=/transformer/h.0/mlp/act/Constant_1:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.0/mlp/act/Pow:0:0 */;
  %68 = multiply(%67, 0.044715f /* ty=float32 span=/transformer/h.0/mlp/act/Constant_2:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.0/mlp/act/Mul_1:0:0 */;
  %69 = add(%66, %68) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.0/mlp/act/Add:0:0 */;
  %70 = multiply(%69, 0.797885f /* ty=float32 span=/transformer/h.0/mlp/act/Constant_3:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.0/mlp/act/Mul_2:0:0 */;
  %71 = tanh(%70) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.0/mlp/act/Tanh:0:0 */;
  %72 = multiply(%66, 0.5f /* ty=float32 span=/transformer/h.0/mlp/act/Constant:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.0/mlp/act/Mul:0:0 */;
  %73 = add(%71, 1f /* ty=float32 span=/transformer/h.0/mlp/act/Constant_4:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.0/mlp/act/Add_1:0:0 */;
  %74 = multiply(%72, %73) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.0/mlp/act/Mul_3:0:0 */;
  %75 = reshape(%74, newshape=[-1, 3072]) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.0/mlp/c_proj/Reshape:0:0 */;
  %76 = transpose(%transformer.h.0.mlp.c_proj.weight, axes=[1, 0]) /* ty=Tensor[(768, 3072), float32] span=/transformer/h.0/mlp/c_proj/Gemm:0:0 */;
  %77 = nn.dense(%75, %76, units=768) /* ty=Tensor[(512, 768), float32] span=/transformer/h.0/mlp/c_proj/Gemm:0:0 */;
  %78 = add(%77, %transformer.h.0.mlp.c_proj.bias) /* ty=Tensor[(512, 768), float32] span=/transformer/h.0/mlp/c_proj/Gemm:0:0 */;
  %79 = reshape(%78, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.0/mlp/c_proj/Reshape_1:0:0 */;
  %80 = add(%52, %79) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.0/Add_1:0:0 */;
  %81 = mean(%80, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.1/ln_1/LayerNormalization:0:0 */;
  %82 = variance(%80, %81, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.1/ln_1/LayerNormalization:0:0 */;
  %83 = add(%82, 1e-05f /* ty=float32 span=/transformer/h.1/ln_1/LayerNormalization:0:0 */) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.1/ln_1/LayerNormalization:0:0 */;
  %84 = sqrt(%83) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.1/ln_1/LayerNormalization:0:0 */;
  %85 = subtract(%80, %81) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.1/ln_1/LayerNormalization:0:0 */;
  %86 = divide(1f /* ty=float32 span=/transformer/h.1/ln_1/LayerNormalization:0:0 */, %84) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.1/ln_1/LayerNormalization:0:0 */;
  %87 = multiply(%85, %86) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.1/ln_1/LayerNormalization:0:0 */;
  %88 = multiply(%87, %transformer.h.1.ln_1.weight) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.1/ln_1/LayerNormalization:0:0 */;
  %89 = add(%88, %transformer.h.1.ln_1.bias) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.1/ln_1/LayerNormalization:0:0 */;
  %90 = reshape(%89, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.1/attn/c_attn/Reshape:0:0 */;
  %91 = transpose(%transformer.h.1.attn.c_attn.weight, axes=[1, 0]) /* ty=Tensor[(2304, 768), float32] span=/transformer/h.1/attn/c_attn/Gemm:0:0 */;
  %92 = nn.dense(%90, %91, units=2304) /* ty=Tensor[(512, 2304), float32] span=/transformer/h.1/attn/c_attn/Gemm:0:0 */;
  %93 = add(%92, %transformer.h.1.attn.c_attn.bias) /* ty=Tensor[(512, 2304), float32] span=/transformer/h.1/attn/c_attn/Gemm:0:0 */;
  %94 = reshape(%93, newshape=[1, 512, 2304]) /* ty=Tensor[(1, 512, 2304), float32] span=/transformer/h.1/attn/c_attn/Reshape_1:0:0 */;
  %95 = split(%94, indices_or_sections=[768i64, 1536i64], axis=2) /* ty=(Tensor[(1, 512, 768), float32], Tensor[(1, 512, 768), float32], Tensor[(1, 512, 768), float32]) span=/transformer/h.1/attn/Split:0:0 */;
  %96 = %95.0 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.1/attn/Split:0:0 */;
  %97 = reshape(%96, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.1/attn/Reshape:0:0 */;
  %98 = transpose(%97, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.1/attn/Transpose:0:0 */;
  %99 = multiply(%98, meta[relay.Constant][4] /* ty=Tensor[(1), float32] span=/transformer/h.1/attn/Sqrt_1:0:0 */) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.1/attn/Mul:0:0 */;
  %100 = %95.1 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.1/attn/Split:0:0 */;
  %101 = reshape(%100, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.1/attn/Reshape_1:0:0 */;
  %102 = transpose(%101, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 512), float32] span=/transformer/h.1/attn/Transpose_3:0:0 */;
  %103 = multiply(%102, meta[relay.Constant][5] /* ty=Tensor[(1), float32] span=/transformer/h.1/attn/Sqrt_2:0:0 */) /* ty=Tensor[(1, 12, 64, 512), float32] span=/transformer/h.1/attn/Mul_1:0:0 */;
  %104 = reshape(%103, newshape=[-1, 64, 512]) /* ty=Tensor[(12, 64, 512), float32] span=/transformer/h.1/attn/MatMul:0:0 */;
  %105 = reshape(%99, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.1/attn/MatMul:0:0 */;
  %106 = transpose(%104, axes=[0, 2, 1]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.1/attn/MatMul:0:0 */;
  %107 = nn.batch_matmul(%105, %106, out_dtype="float32", transpose_b=True) /* ty=Tensor[(12, 512, 512), float32] span=/transformer/h.1/attn/MatMul:0:0 */;
  %108 = reshape(%107, newshape=[1, 12, 512, 512]) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.1/attn/MatMul:0:0 */;
  %109 = add(%108, meta[relay.Constant][3] /* ty=Tensor[(1, 1, 512, 512), float32] span=/transformer/Expand:0:0 */) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.1/attn/Add:0:0 */;
  %110 = nn.softmax(%109, axis=3) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.1/attn/Softmax:0:0 */;
  %111 = %95.2 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.1/attn/Split:0:0 */;
  %112 = reshape(%111, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.1/attn/Reshape_2:0:0 */;
  %113 = transpose(%112, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.1/attn/Transpose_2:0:0 */;
  %114 = reshape(%113, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.1/attn/MatMul_1:0:0 */;
  %115 = reshape(%110, newshape=[-1, 512, 512]) /* ty=Tensor[(12, 512, 512), float32] span=/transformer/h.1/attn/MatMul_1:0:0 */;
  %116 = transpose(%114, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 512), float32] span=/transformer/h.1/attn/MatMul_1:0:0 */;
  %117 = nn.batch_matmul(%115, %116, out_dtype="float32", transpose_b=True) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.1/attn/MatMul_1:0:0 */;
  %118 = reshape(%117, newshape=[1, 12, 512, 64]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.1/attn/MatMul_1:0:0 */;
  %119 = transpose(%118, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.1/attn/Transpose_4:0:0 */;
  %120 = reshape(%119, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.1/attn/Reshape_3:0:0 */;
  %121 = reshape(%120, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.1/attn/c_proj/Reshape:0:0 */;
  %122 = transpose(%transformer.h.1.attn.c_proj.weight, axes=[1, 0]) /* ty=Tensor[(768, 768), float32] span=/transformer/h.1/attn/c_proj/Gemm:0:0 */;
  %123 = nn.dense(%121, %122, units=768) /* ty=Tensor[(512, 768), float32] span=/transformer/h.1/attn/c_proj/Gemm:0:0 */;
  %124 = add(%123, %transformer.h.1.attn.c_proj.bias) /* ty=Tensor[(512, 768), float32] span=/transformer/h.1/attn/c_proj/Gemm:0:0 */;
  %125 = reshape(%124, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.1/attn/c_proj/Reshape_1:0:0 */;
  %126 = add(%125, %80) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.1/Add:0:0 */;
  %127 = mean(%126, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.1/ln_2/LayerNormalization:0:0 */;
  %128 = variance(%126, %127, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.1/ln_2/LayerNormalization:0:0 */;
  %129 = add(%128, 1e-05f /* ty=float32 span=/transformer/h.1/ln_2/LayerNormalization:0:0 */) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.1/ln_2/LayerNormalization:0:0 */;
  %130 = sqrt(%129) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.1/ln_2/LayerNormalization:0:0 */;
  %131 = subtract(%126, %127) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.1/ln_2/LayerNormalization:0:0 */;
  %132 = divide(1f /* ty=float32 span=/transformer/h.1/ln_2/LayerNormalization:0:0 */, %130) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.1/ln_2/LayerNormalization:0:0 */;
  %133 = multiply(%131, %132) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.1/ln_2/LayerNormalization:0:0 */;
  %134 = multiply(%133, %transformer.h.1.ln_2.weight) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.1/ln_2/LayerNormalization:0:0 */;
  %135 = add(%134, %transformer.h.1.ln_2.bias) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.1/ln_2/LayerNormalization:0:0 */;
  %136 = reshape(%135, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.1/mlp/c_fc/Reshape:0:0 */;
  %137 = transpose(%transformer.h.1.mlp.c_fc.weight, axes=[1, 0]) /* ty=Tensor[(3072, 768), float32] span=/transformer/h.1/mlp/c_fc/Gemm:0:0 */;
  %138 = nn.dense(%136, %137, units=3072) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.1/mlp/c_fc/Gemm:0:0 */;
  %139 = add(%138, %transformer.h.1.mlp.c_fc.bias) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.1/mlp/c_fc/Gemm:0:0 */;
  %140 = reshape(%139, newshape=[1, 512, 3072]) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.1/mlp/c_fc/Reshape_1:0:0 */;
  %141 = power(%140, 3f /* ty=float32 span=/transformer/h.1/mlp/act/Constant_1:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.1/mlp/act/Pow:0:0 */;
  %142 = multiply(%141, 0.044715f /* ty=float32 span=/transformer/h.1/mlp/act/Constant_2:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.1/mlp/act/Mul_1:0:0 */;
  %143 = add(%140, %142) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.1/mlp/act/Add:0:0 */;
  %144 = multiply(%143, 0.797885f /* ty=float32 span=/transformer/h.1/mlp/act/Constant_3:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.1/mlp/act/Mul_2:0:0 */;
  %145 = tanh(%144) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.1/mlp/act/Tanh:0:0 */;
  %146 = multiply(%140, 0.5f /* ty=float32 span=/transformer/h.1/mlp/act/Constant:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.1/mlp/act/Mul:0:0 */;
  %147 = add(%145, 1f /* ty=float32 span=/transformer/h.1/mlp/act/Constant_4:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.1/mlp/act/Add_1:0:0 */;
  %148 = multiply(%146, %147) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.1/mlp/act/Mul_3:0:0 */;
  %149 = reshape(%148, newshape=[-1, 3072]) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.1/mlp/c_proj/Reshape:0:0 */;
  %150 = transpose(%transformer.h.1.mlp.c_proj.weight, axes=[1, 0]) /* ty=Tensor[(768, 3072), float32] span=/transformer/h.1/mlp/c_proj/Gemm:0:0 */;
  %151 = nn.dense(%149, %150, units=768) /* ty=Tensor[(512, 768), float32] span=/transformer/h.1/mlp/c_proj/Gemm:0:0 */;
  %152 = add(%151, %transformer.h.1.mlp.c_proj.bias) /* ty=Tensor[(512, 768), float32] span=/transformer/h.1/mlp/c_proj/Gemm:0:0 */;
  %153 = reshape(%152, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.1/mlp/c_proj/Reshape_1:0:0 */;
  %154 = add(%126, %153) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.1/Add_1:0:0 */;
  %155 = mean(%154, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.2/ln_1/LayerNormalization:0:0 */;
  %156 = variance(%154, %155, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.2/ln_1/LayerNormalization:0:0 */;
  %157 = add(%156, 1e-05f /* ty=float32 span=/transformer/h.2/ln_1/LayerNormalization:0:0 */) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.2/ln_1/LayerNormalization:0:0 */;
  %158 = sqrt(%157) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.2/ln_1/LayerNormalization:0:0 */;
  %159 = subtract(%154, %155) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.2/ln_1/LayerNormalization:0:0 */;
  %160 = divide(1f /* ty=float32 span=/transformer/h.2/ln_1/LayerNormalization:0:0 */, %158) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.2/ln_1/LayerNormalization:0:0 */;
  %161 = multiply(%159, %160) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.2/ln_1/LayerNormalization:0:0 */;
  %162 = multiply(%161, %transformer.h.2.ln_1.weight) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.2/ln_1/LayerNormalization:0:0 */;
  %163 = add(%162, %transformer.h.2.ln_1.bias) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.2/ln_1/LayerNormalization:0:0 */;
  %164 = reshape(%163, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.2/attn/c_attn/Reshape:0:0 */;
  %165 = transpose(%transformer.h.2.attn.c_attn.weight, axes=[1, 0]) /* ty=Tensor[(2304, 768), float32] span=/transformer/h.2/attn/c_attn/Gemm:0:0 */;
  %166 = nn.dense(%164, %165, units=2304) /* ty=Tensor[(512, 2304), float32] span=/transformer/h.2/attn/c_attn/Gemm:0:0 */;
  %167 = add(%166, %transformer.h.2.attn.c_attn.bias) /* ty=Tensor[(512, 2304), float32] span=/transformer/h.2/attn/c_attn/Gemm:0:0 */;
  %168 = reshape(%167, newshape=[1, 512, 2304]) /* ty=Tensor[(1, 512, 2304), float32] span=/transformer/h.2/attn/c_attn/Reshape_1:0:0 */;
  %169 = split(%168, indices_or_sections=[768i64, 1536i64], axis=2) /* ty=(Tensor[(1, 512, 768), float32], Tensor[(1, 512, 768), float32], Tensor[(1, 512, 768), float32]) span=/transformer/h.2/attn/Split:0:0 */;
  %170 = %169.0 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.2/attn/Split:0:0 */;
  %171 = reshape(%170, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.2/attn/Reshape:0:0 */;
  %172 = transpose(%171, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.2/attn/Transpose:0:0 */;
  %173 = multiply(%172, meta[relay.Constant][6] /* ty=Tensor[(1), float32] span=/transformer/h.2/attn/Sqrt_1:0:0 */) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.2/attn/Mul:0:0 */;
  %174 = %169.1 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.2/attn/Split:0:0 */;
  %175 = reshape(%174, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.2/attn/Reshape_1:0:0 */;
  %176 = transpose(%175, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 512), float32] span=/transformer/h.2/attn/Transpose_3:0:0 */;
  %177 = multiply(%176, meta[relay.Constant][7] /* ty=Tensor[(1), float32] span=/transformer/h.2/attn/Sqrt_2:0:0 */) /* ty=Tensor[(1, 12, 64, 512), float32] span=/transformer/h.2/attn/Mul_1:0:0 */;
  %178 = reshape(%177, newshape=[-1, 64, 512]) /* ty=Tensor[(12, 64, 512), float32] span=/transformer/h.2/attn/MatMul:0:0 */;
  %179 = reshape(%173, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.2/attn/MatMul:0:0 */;
  %180 = transpose(%178, axes=[0, 2, 1]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.2/attn/MatMul:0:0 */;
  %181 = nn.batch_matmul(%179, %180, out_dtype="float32", transpose_b=True) /* ty=Tensor[(12, 512, 512), float32] span=/transformer/h.2/attn/MatMul:0:0 */;
  %182 = reshape(%181, newshape=[1, 12, 512, 512]) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.2/attn/MatMul:0:0 */;
  %183 = add(%182, meta[relay.Constant][3] /* ty=Tensor[(1, 1, 512, 512), float32] span=/transformer/Expand:0:0 */) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.2/attn/Add:0:0 */;
  %184 = nn.softmax(%183, axis=3) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.2/attn/Softmax:0:0 */;
  %185 = %169.2 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.2/attn/Split:0:0 */;
  %186 = reshape(%185, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.2/attn/Reshape_2:0:0 */;
  %187 = transpose(%186, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.2/attn/Transpose_2:0:0 */;
  %188 = reshape(%187, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.2/attn/MatMul_1:0:0 */;
  %189 = reshape(%184, newshape=[-1, 512, 512]) /* ty=Tensor[(12, 512, 512), float32] span=/transformer/h.2/attn/MatMul_1:0:0 */;
  %190 = transpose(%188, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 512), float32] span=/transformer/h.2/attn/MatMul_1:0:0 */;
  %191 = nn.batch_matmul(%189, %190, out_dtype="float32", transpose_b=True) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.2/attn/MatMul_1:0:0 */;
  %192 = reshape(%191, newshape=[1, 12, 512, 64]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.2/attn/MatMul_1:0:0 */;
  %193 = transpose(%192, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.2/attn/Transpose_4:0:0 */;
  %194 = reshape(%193, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.2/attn/Reshape_3:0:0 */;
  %195 = reshape(%194, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.2/attn/c_proj/Reshape:0:0 */;
  %196 = transpose(%transformer.h.2.attn.c_proj.weight, axes=[1, 0]) /* ty=Tensor[(768, 768), float32] span=/transformer/h.2/attn/c_proj/Gemm:0:0 */;
  %197 = nn.dense(%195, %196, units=768) /* ty=Tensor[(512, 768), float32] span=/transformer/h.2/attn/c_proj/Gemm:0:0 */;
  %198 = add(%197, %transformer.h.2.attn.c_proj.bias) /* ty=Tensor[(512, 768), float32] span=/transformer/h.2/attn/c_proj/Gemm:0:0 */;
  %199 = reshape(%198, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.2/attn/c_proj/Reshape_1:0:0 */;
  %200 = add(%199, %154) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.2/Add:0:0 */;
  %201 = mean(%200, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.2/ln_2/LayerNormalization:0:0 */;
  %202 = variance(%200, %201, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.2/ln_2/LayerNormalization:0:0 */;
  %203 = add(%202, 1e-05f /* ty=float32 span=/transformer/h.2/ln_2/LayerNormalization:0:0 */) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.2/ln_2/LayerNormalization:0:0 */;
  %204 = sqrt(%203) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.2/ln_2/LayerNormalization:0:0 */;
  %205 = subtract(%200, %201) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.2/ln_2/LayerNormalization:0:0 */;
  %206 = divide(1f /* ty=float32 span=/transformer/h.2/ln_2/LayerNormalization:0:0 */, %204) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.2/ln_2/LayerNormalization:0:0 */;
  %207 = multiply(%205, %206) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.2/ln_2/LayerNormalization:0:0 */;
  %208 = multiply(%207, %transformer.h.2.ln_2.weight) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.2/ln_2/LayerNormalization:0:0 */;
  %209 = add(%208, %transformer.h.2.ln_2.bias) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.2/ln_2/LayerNormalization:0:0 */;
  %210 = reshape(%209, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.2/mlp/c_fc/Reshape:0:0 */;
  %211 = transpose(%transformer.h.2.mlp.c_fc.weight, axes=[1, 0]) /* ty=Tensor[(3072, 768), float32] span=/transformer/h.2/mlp/c_fc/Gemm:0:0 */;
  %212 = nn.dense(%210, %211, units=3072) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.2/mlp/c_fc/Gemm:0:0 */;
  %213 = add(%212, %transformer.h.2.mlp.c_fc.bias) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.2/mlp/c_fc/Gemm:0:0 */;
  %214 = reshape(%213, newshape=[1, 512, 3072]) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.2/mlp/c_fc/Reshape_1:0:0 */;
  %215 = power(%214, 3f /* ty=float32 span=/transformer/h.2/mlp/act/Constant_1:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.2/mlp/act/Pow:0:0 */;
  %216 = multiply(%215, 0.044715f /* ty=float32 span=/transformer/h.2/mlp/act/Constant_2:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.2/mlp/act/Mul_1:0:0 */;
  %217 = add(%214, %216) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.2/mlp/act/Add:0:0 */;
  %218 = multiply(%217, 0.797885f /* ty=float32 span=/transformer/h.2/mlp/act/Constant_3:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.2/mlp/act/Mul_2:0:0 */;
  %219 = tanh(%218) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.2/mlp/act/Tanh:0:0 */;
  %220 = multiply(%214, 0.5f /* ty=float32 span=/transformer/h.2/mlp/act/Constant:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.2/mlp/act/Mul:0:0 */;
  %221 = add(%219, 1f /* ty=float32 span=/transformer/h.2/mlp/act/Constant_4:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.2/mlp/act/Add_1:0:0 */;
  %222 = multiply(%220, %221) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.2/mlp/act/Mul_3:0:0 */;
  %223 = reshape(%222, newshape=[-1, 3072]) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.2/mlp/c_proj/Reshape:0:0 */;
  %224 = transpose(%transformer.h.2.mlp.c_proj.weight, axes=[1, 0]) /* ty=Tensor[(768, 3072), float32] span=/transformer/h.2/mlp/c_proj/Gemm:0:0 */;
  %225 = nn.dense(%223, %224, units=768) /* ty=Tensor[(512, 768), float32] span=/transformer/h.2/mlp/c_proj/Gemm:0:0 */;
  %226 = add(%225, %transformer.h.2.mlp.c_proj.bias) /* ty=Tensor[(512, 768), float32] span=/transformer/h.2/mlp/c_proj/Gemm:0:0 */;
  %227 = reshape(%226, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.2/mlp/c_proj/Reshape_1:0:0 */;
  %228 = add(%200, %227) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.2/Add_1:0:0 */;
  %229 = mean(%228, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.3/ln_1/LayerNormalization:0:0 */;
  %230 = variance(%228, %229, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.3/ln_1/LayerNormalization:0:0 */;
  %231 = add(%230, 1e-05f /* ty=float32 span=/transformer/h.3/ln_1/LayerNormalization:0:0 */) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.3/ln_1/LayerNormalization:0:0 */;
  %232 = sqrt(%231) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.3/ln_1/LayerNormalization:0:0 */;
  %233 = subtract(%228, %229) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.3/ln_1/LayerNormalization:0:0 */;
  %234 = divide(1f /* ty=float32 span=/transformer/h.3/ln_1/LayerNormalization:0:0 */, %232) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.3/ln_1/LayerNormalization:0:0 */;
  %235 = multiply(%233, %234) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.3/ln_1/LayerNormalization:0:0 */;
  %236 = multiply(%235, %transformer.h.3.ln_1.weight) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.3/ln_1/LayerNormalization:0:0 */;
  %237 = add(%236, %transformer.h.3.ln_1.bias) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.3/ln_1/LayerNormalization:0:0 */;
  %238 = reshape(%237, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.3/attn/c_attn/Reshape:0:0 */;
  %239 = transpose(%transformer.h.3.attn.c_attn.weight, axes=[1, 0]) /* ty=Tensor[(2304, 768), float32] span=/transformer/h.3/attn/c_attn/Gemm:0:0 */;
  %240 = nn.dense(%238, %239, units=2304) /* ty=Tensor[(512, 2304), float32] span=/transformer/h.3/attn/c_attn/Gemm:0:0 */;
  %241 = add(%240, %transformer.h.3.attn.c_attn.bias) /* ty=Tensor[(512, 2304), float32] span=/transformer/h.3/attn/c_attn/Gemm:0:0 */;
  %242 = reshape(%241, newshape=[1, 512, 2304]) /* ty=Tensor[(1, 512, 2304), float32] span=/transformer/h.3/attn/c_attn/Reshape_1:0:0 */;
  %243 = split(%242, indices_or_sections=[768i64, 1536i64], axis=2) /* ty=(Tensor[(1, 512, 768), float32], Tensor[(1, 512, 768), float32], Tensor[(1, 512, 768), float32]) span=/transformer/h.3/attn/Split:0:0 */;
  %244 = %243.0 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.3/attn/Split:0:0 */;
  %245 = reshape(%244, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.3/attn/Reshape:0:0 */;
  %246 = transpose(%245, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.3/attn/Transpose:0:0 */;
  %247 = multiply(%246, meta[relay.Constant][8] /* ty=Tensor[(1), float32] span=/transformer/h.3/attn/Sqrt_1:0:0 */) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.3/attn/Mul:0:0 */;
  %248 = %243.1 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.3/attn/Split:0:0 */;
  %249 = reshape(%248, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.3/attn/Reshape_1:0:0 */;
  %250 = transpose(%249, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 512), float32] span=/transformer/h.3/attn/Transpose_3:0:0 */;
  %251 = multiply(%250, meta[relay.Constant][9] /* ty=Tensor[(1), float32] span=/transformer/h.3/attn/Sqrt_2:0:0 */) /* ty=Tensor[(1, 12, 64, 512), float32] span=/transformer/h.3/attn/Mul_1:0:0 */;
  %252 = reshape(%251, newshape=[-1, 64, 512]) /* ty=Tensor[(12, 64, 512), float32] span=/transformer/h.3/attn/MatMul:0:0 */;
  %253 = reshape(%247, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.3/attn/MatMul:0:0 */;
  %254 = transpose(%252, axes=[0, 2, 1]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.3/attn/MatMul:0:0 */;
  %255 = nn.batch_matmul(%253, %254, out_dtype="float32", transpose_b=True) /* ty=Tensor[(12, 512, 512), float32] span=/transformer/h.3/attn/MatMul:0:0 */;
  %256 = reshape(%255, newshape=[1, 12, 512, 512]) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.3/attn/MatMul:0:0 */;
  %257 = add(%256, meta[relay.Constant][3] /* ty=Tensor[(1, 1, 512, 512), float32] span=/transformer/Expand:0:0 */) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.3/attn/Add:0:0 */;
  %258 = nn.softmax(%257, axis=3) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.3/attn/Softmax:0:0 */;
  %259 = %243.2 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.3/attn/Split:0:0 */;
  %260 = reshape(%259, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.3/attn/Reshape_2:0:0 */;
  %261 = transpose(%260, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.3/attn/Transpose_2:0:0 */;
  %262 = reshape(%261, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.3/attn/MatMul_1:0:0 */;
  %263 = reshape(%258, newshape=[-1, 512, 512]) /* ty=Tensor[(12, 512, 512), float32] span=/transformer/h.3/attn/MatMul_1:0:0 */;
  %264 = transpose(%262, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 512), float32] span=/transformer/h.3/attn/MatMul_1:0:0 */;
  %265 = nn.batch_matmul(%263, %264, out_dtype="float32", transpose_b=True) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.3/attn/MatMul_1:0:0 */;
  %266 = reshape(%265, newshape=[1, 12, 512, 64]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.3/attn/MatMul_1:0:0 */;
  %267 = transpose(%266, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.3/attn/Transpose_4:0:0 */;
  %268 = reshape(%267, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.3/attn/Reshape_3:0:0 */;
  %269 = reshape(%268, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.3/attn/c_proj/Reshape:0:0 */;
  %270 = transpose(%transformer.h.3.attn.c_proj.weight, axes=[1, 0]) /* ty=Tensor[(768, 768), float32] span=/transformer/h.3/attn/c_proj/Gemm:0:0 */;
  %271 = nn.dense(%269, %270, units=768) /* ty=Tensor[(512, 768), float32] span=/transformer/h.3/attn/c_proj/Gemm:0:0 */;
  %272 = add(%271, %transformer.h.3.attn.c_proj.bias) /* ty=Tensor[(512, 768), float32] span=/transformer/h.3/attn/c_proj/Gemm:0:0 */;
  %273 = reshape(%272, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.3/attn/c_proj/Reshape_1:0:0 */;
  %274 = add(%273, %228) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.3/Add:0:0 */;
  %275 = mean(%274, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.3/ln_2/LayerNormalization:0:0 */;
  %276 = variance(%274, %275, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.3/ln_2/LayerNormalization:0:0 */;
  %277 = add(%276, 1e-05f /* ty=float32 span=/transformer/h.3/ln_2/LayerNormalization:0:0 */) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.3/ln_2/LayerNormalization:0:0 */;
  %278 = sqrt(%277) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.3/ln_2/LayerNormalization:0:0 */;
  %279 = subtract(%274, %275) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.3/ln_2/LayerNormalization:0:0 */;
  %280 = divide(1f /* ty=float32 span=/transformer/h.3/ln_2/LayerNormalization:0:0 */, %278) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.3/ln_2/LayerNormalization:0:0 */;
  %281 = multiply(%279, %280) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.3/ln_2/LayerNormalization:0:0 */;
  %282 = multiply(%281, %transformer.h.3.ln_2.weight) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.3/ln_2/LayerNormalization:0:0 */;
  %283 = add(%282, %transformer.h.3.ln_2.bias) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.3/ln_2/LayerNormalization:0:0 */;
  %284 = reshape(%283, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.3/mlp/c_fc/Reshape:0:0 */;
  %285 = transpose(%transformer.h.3.mlp.c_fc.weight, axes=[1, 0]) /* ty=Tensor[(3072, 768), float32] span=/transformer/h.3/mlp/c_fc/Gemm:0:0 */;
  %286 = nn.dense(%284, %285, units=3072) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.3/mlp/c_fc/Gemm:0:0 */;
  %287 = add(%286, %transformer.h.3.mlp.c_fc.bias) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.3/mlp/c_fc/Gemm:0:0 */;
  %288 = reshape(%287, newshape=[1, 512, 3072]) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.3/mlp/c_fc/Reshape_1:0:0 */;
  %289 = power(%288, 3f /* ty=float32 span=/transformer/h.3/mlp/act/Constant_1:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.3/mlp/act/Pow:0:0 */;
  %290 = multiply(%289, 0.044715f /* ty=float32 span=/transformer/h.3/mlp/act/Constant_2:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.3/mlp/act/Mul_1:0:0 */;
  %291 = add(%288, %290) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.3/mlp/act/Add:0:0 */;
  %292 = multiply(%291, 0.797885f /* ty=float32 span=/transformer/h.3/mlp/act/Constant_3:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.3/mlp/act/Mul_2:0:0 */;
  %293 = tanh(%292) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.3/mlp/act/Tanh:0:0 */;
  %294 = multiply(%288, 0.5f /* ty=float32 span=/transformer/h.3/mlp/act/Constant:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.3/mlp/act/Mul:0:0 */;
  %295 = add(%293, 1f /* ty=float32 span=/transformer/h.3/mlp/act/Constant_4:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.3/mlp/act/Add_1:0:0 */;
  %296 = multiply(%294, %295) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.3/mlp/act/Mul_3:0:0 */;
  %297 = reshape(%296, newshape=[-1, 3072]) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.3/mlp/c_proj/Reshape:0:0 */;
  %298 = transpose(%transformer.h.3.mlp.c_proj.weight, axes=[1, 0]) /* ty=Tensor[(768, 3072), float32] span=/transformer/h.3/mlp/c_proj/Gemm:0:0 */;
  %299 = nn.dense(%297, %298, units=768) /* ty=Tensor[(512, 768), float32] span=/transformer/h.3/mlp/c_proj/Gemm:0:0 */;
  %300 = add(%299, %transformer.h.3.mlp.c_proj.bias) /* ty=Tensor[(512, 768), float32] span=/transformer/h.3/mlp/c_proj/Gemm:0:0 */;
  %301 = reshape(%300, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.3/mlp/c_proj/Reshape_1:0:0 */;
  %302 = add(%274, %301) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.3/Add_1:0:0 */;
  %303 = mean(%302, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.4/ln_1/LayerNormalization:0:0 */;
  %304 = variance(%302, %303, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.4/ln_1/LayerNormalization:0:0 */;
  %305 = add(%304, 1e-05f /* ty=float32 span=/transformer/h.4/ln_1/LayerNormalization:0:0 */) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.4/ln_1/LayerNormalization:0:0 */;
  %306 = sqrt(%305) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.4/ln_1/LayerNormalization:0:0 */;
  %307 = subtract(%302, %303) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.4/ln_1/LayerNormalization:0:0 */;
  %308 = divide(1f /* ty=float32 span=/transformer/h.4/ln_1/LayerNormalization:0:0 */, %306) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.4/ln_1/LayerNormalization:0:0 */;
  %309 = multiply(%307, %308) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.4/ln_1/LayerNormalization:0:0 */;
  %310 = multiply(%309, %transformer.h.4.ln_1.weight) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.4/ln_1/LayerNormalization:0:0 */;
  %311 = add(%310, %transformer.h.4.ln_1.bias) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.4/ln_1/LayerNormalization:0:0 */;
  %312 = reshape(%311, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.4/attn/c_attn/Reshape:0:0 */;
  %313 = transpose(%transformer.h.4.attn.c_attn.weight, axes=[1, 0]) /* ty=Tensor[(2304, 768), float32] span=/transformer/h.4/attn/c_attn/Gemm:0:0 */;
  %314 = nn.dense(%312, %313, units=2304) /* ty=Tensor[(512, 2304), float32] span=/transformer/h.4/attn/c_attn/Gemm:0:0 */;
  %315 = add(%314, %transformer.h.4.attn.c_attn.bias) /* ty=Tensor[(512, 2304), float32] span=/transformer/h.4/attn/c_attn/Gemm:0:0 */;
  %316 = reshape(%315, newshape=[1, 512, 2304]) /* ty=Tensor[(1, 512, 2304), float32] span=/transformer/h.4/attn/c_attn/Reshape_1:0:0 */;
  %317 = split(%316, indices_or_sections=[768i64, 1536i64], axis=2) /* ty=(Tensor[(1, 512, 768), float32], Tensor[(1, 512, 768), float32], Tensor[(1, 512, 768), float32]) span=/transformer/h.4/attn/Split:0:0 */;
  %318 = %317.0 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.4/attn/Split:0:0 */;
  %319 = reshape(%318, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.4/attn/Reshape:0:0 */;
  %320 = transpose(%319, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.4/attn/Transpose:0:0 */;
  %321 = multiply(%320, meta[relay.Constant][10] /* ty=Tensor[(1), float32] span=/transformer/h.4/attn/Sqrt_1:0:0 */) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.4/attn/Mul:0:0 */;
  %322 = %317.1 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.4/attn/Split:0:0 */;
  %323 = reshape(%322, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.4/attn/Reshape_1:0:0 */;
  %324 = transpose(%323, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 512), float32] span=/transformer/h.4/attn/Transpose_3:0:0 */;
  %325 = multiply(%324, meta[relay.Constant][11] /* ty=Tensor[(1), float32] span=/transformer/h.4/attn/Sqrt_2:0:0 */) /* ty=Tensor[(1, 12, 64, 512), float32] span=/transformer/h.4/attn/Mul_1:0:0 */;
  %326 = reshape(%325, newshape=[-1, 64, 512]) /* ty=Tensor[(12, 64, 512), float32] span=/transformer/h.4/attn/MatMul:0:0 */;
  %327 = reshape(%321, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.4/attn/MatMul:0:0 */;
  %328 = transpose(%326, axes=[0, 2, 1]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.4/attn/MatMul:0:0 */;
  %329 = nn.batch_matmul(%327, %328, out_dtype="float32", transpose_b=True) /* ty=Tensor[(12, 512, 512), float32] span=/transformer/h.4/attn/MatMul:0:0 */;
  %330 = reshape(%329, newshape=[1, 12, 512, 512]) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.4/attn/MatMul:0:0 */;
  %331 = add(%330, meta[relay.Constant][3] /* ty=Tensor[(1, 1, 512, 512), float32] span=/transformer/Expand:0:0 */) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.4/attn/Add:0:0 */;
  %332 = nn.softmax(%331, axis=3) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.4/attn/Softmax:0:0 */;
  %333 = %317.2 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.4/attn/Split:0:0 */;
  %334 = reshape(%333, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.4/attn/Reshape_2:0:0 */;
  %335 = transpose(%334, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.4/attn/Transpose_2:0:0 */;
  %336 = reshape(%335, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.4/attn/MatMul_1:0:0 */;
  %337 = reshape(%332, newshape=[-1, 512, 512]) /* ty=Tensor[(12, 512, 512), float32] span=/transformer/h.4/attn/MatMul_1:0:0 */;
  %338 = transpose(%336, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 512), float32] span=/transformer/h.4/attn/MatMul_1:0:0 */;
  %339 = nn.batch_matmul(%337, %338, out_dtype="float32", transpose_b=True) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.4/attn/MatMul_1:0:0 */;
  %340 = reshape(%339, newshape=[1, 12, 512, 64]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.4/attn/MatMul_1:0:0 */;
  %341 = transpose(%340, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.4/attn/Transpose_4:0:0 */;
  %342 = reshape(%341, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.4/attn/Reshape_3:0:0 */;
  %343 = reshape(%342, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.4/attn/c_proj/Reshape:0:0 */;
  %344 = transpose(%transformer.h.4.attn.c_proj.weight, axes=[1, 0]) /* ty=Tensor[(768, 768), float32] span=/transformer/h.4/attn/c_proj/Gemm:0:0 */;
  %345 = nn.dense(%343, %344, units=768) /* ty=Tensor[(512, 768), float32] span=/transformer/h.4/attn/c_proj/Gemm:0:0 */;
  %346 = add(%345, %transformer.h.4.attn.c_proj.bias) /* ty=Tensor[(512, 768), float32] span=/transformer/h.4/attn/c_proj/Gemm:0:0 */;
  %347 = reshape(%346, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.4/attn/c_proj/Reshape_1:0:0 */;
  %348 = add(%347, %302) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.4/Add:0:0 */;
  %349 = mean(%348, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.4/ln_2/LayerNormalization:0:0 */;
  %350 = variance(%348, %349, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.4/ln_2/LayerNormalization:0:0 */;
  %351 = add(%350, 1e-05f /* ty=float32 span=/transformer/h.4/ln_2/LayerNormalization:0:0 */) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.4/ln_2/LayerNormalization:0:0 */;
  %352 = sqrt(%351) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.4/ln_2/LayerNormalization:0:0 */;
  %353 = subtract(%348, %349) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.4/ln_2/LayerNormalization:0:0 */;
  %354 = divide(1f /* ty=float32 span=/transformer/h.4/ln_2/LayerNormalization:0:0 */, %352) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.4/ln_2/LayerNormalization:0:0 */;
  %355 = multiply(%353, %354) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.4/ln_2/LayerNormalization:0:0 */;
  %356 = multiply(%355, %transformer.h.4.ln_2.weight) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.4/ln_2/LayerNormalization:0:0 */;
  %357 = add(%356, %transformer.h.4.ln_2.bias) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.4/ln_2/LayerNormalization:0:0 */;
  %358 = reshape(%357, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.4/mlp/c_fc/Reshape:0:0 */;
  %359 = transpose(%transformer.h.4.mlp.c_fc.weight, axes=[1, 0]) /* ty=Tensor[(3072, 768), float32] span=/transformer/h.4/mlp/c_fc/Gemm:0:0 */;
  %360 = nn.dense(%358, %359, units=3072) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.4/mlp/c_fc/Gemm:0:0 */;
  %361 = add(%360, %transformer.h.4.mlp.c_fc.bias) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.4/mlp/c_fc/Gemm:0:0 */;
  %362 = reshape(%361, newshape=[1, 512, 3072]) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.4/mlp/c_fc/Reshape_1:0:0 */;
  %363 = power(%362, 3f /* ty=float32 span=/transformer/h.4/mlp/act/Constant_1:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.4/mlp/act/Pow:0:0 */;
  %364 = multiply(%363, 0.044715f /* ty=float32 span=/transformer/h.4/mlp/act/Constant_2:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.4/mlp/act/Mul_1:0:0 */;
  %365 = add(%362, %364) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.4/mlp/act/Add:0:0 */;
  %366 = multiply(%365, 0.797885f /* ty=float32 span=/transformer/h.4/mlp/act/Constant_3:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.4/mlp/act/Mul_2:0:0 */;
  %367 = tanh(%366) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.4/mlp/act/Tanh:0:0 */;
  %368 = multiply(%362, 0.5f /* ty=float32 span=/transformer/h.4/mlp/act/Constant:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.4/mlp/act/Mul:0:0 */;
  %369 = add(%367, 1f /* ty=float32 span=/transformer/h.4/mlp/act/Constant_4:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.4/mlp/act/Add_1:0:0 */;
  %370 = multiply(%368, %369) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.4/mlp/act/Mul_3:0:0 */;
  %371 = reshape(%370, newshape=[-1, 3072]) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.4/mlp/c_proj/Reshape:0:0 */;
  %372 = transpose(%transformer.h.4.mlp.c_proj.weight, axes=[1, 0]) /* ty=Tensor[(768, 3072), float32] span=/transformer/h.4/mlp/c_proj/Gemm:0:0 */;
  %373 = nn.dense(%371, %372, units=768) /* ty=Tensor[(512, 768), float32] span=/transformer/h.4/mlp/c_proj/Gemm:0:0 */;
  %374 = add(%373, %transformer.h.4.mlp.c_proj.bias) /* ty=Tensor[(512, 768), float32] span=/transformer/h.4/mlp/c_proj/Gemm:0:0 */;
  %375 = reshape(%374, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.4/mlp/c_proj/Reshape_1:0:0 */;
  %376 = add(%348, %375) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.4/Add_1:0:0 */;
  %377 = mean(%376, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.5/ln_1/LayerNormalization:0:0 */;
  %378 = variance(%376, %377, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.5/ln_1/LayerNormalization:0:0 */;
  %379 = add(%378, 1e-05f /* ty=float32 span=/transformer/h.5/ln_1/LayerNormalization:0:0 */) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.5/ln_1/LayerNormalization:0:0 */;
  %380 = sqrt(%379) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.5/ln_1/LayerNormalization:0:0 */;
  %381 = subtract(%376, %377) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.5/ln_1/LayerNormalization:0:0 */;
  %382 = divide(1f /* ty=float32 span=/transformer/h.5/ln_1/LayerNormalization:0:0 */, %380) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.5/ln_1/LayerNormalization:0:0 */;
  %383 = multiply(%381, %382) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.5/ln_1/LayerNormalization:0:0 */;
  %384 = multiply(%383, %transformer.h.5.ln_1.weight) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.5/ln_1/LayerNormalization:0:0 */;
  %385 = add(%384, %transformer.h.5.ln_1.bias) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.5/ln_1/LayerNormalization:0:0 */;
  %386 = reshape(%385, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.5/attn/c_attn/Reshape:0:0 */;
  %387 = transpose(%transformer.h.5.attn.c_attn.weight, axes=[1, 0]) /* ty=Tensor[(2304, 768), float32] span=/transformer/h.5/attn/c_attn/Gemm:0:0 */;
  %388 = nn.dense(%386, %387, units=2304) /* ty=Tensor[(512, 2304), float32] span=/transformer/h.5/attn/c_attn/Gemm:0:0 */;
  %389 = add(%388, %transformer.h.5.attn.c_attn.bias) /* ty=Tensor[(512, 2304), float32] span=/transformer/h.5/attn/c_attn/Gemm:0:0 */;
  %390 = reshape(%389, newshape=[1, 512, 2304]) /* ty=Tensor[(1, 512, 2304), float32] span=/transformer/h.5/attn/c_attn/Reshape_1:0:0 */;
  %391 = split(%390, indices_or_sections=[768i64, 1536i64], axis=2) /* ty=(Tensor[(1, 512, 768), float32], Tensor[(1, 512, 768), float32], Tensor[(1, 512, 768), float32]) span=/transformer/h.5/attn/Split:0:0 */;
  %392 = %391.0 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.5/attn/Split:0:0 */;
  %393 = reshape(%392, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.5/attn/Reshape:0:0 */;
  %394 = transpose(%393, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.5/attn/Transpose:0:0 */;
  %395 = multiply(%394, meta[relay.Constant][12] /* ty=Tensor[(1), float32] span=/transformer/h.5/attn/Sqrt_1:0:0 */) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.5/attn/Mul:0:0 */;
  %396 = %391.1 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.5/attn/Split:0:0 */;
  %397 = reshape(%396, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.5/attn/Reshape_1:0:0 */;
  %398 = transpose(%397, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 512), float32] span=/transformer/h.5/attn/Transpose_3:0:0 */;
  %399 = multiply(%398, meta[relay.Constant][13] /* ty=Tensor[(1), float32] span=/transformer/h.5/attn/Sqrt_2:0:0 */) /* ty=Tensor[(1, 12, 64, 512), float32] span=/transformer/h.5/attn/Mul_1:0:0 */;
  %400 = reshape(%399, newshape=[-1, 64, 512]) /* ty=Tensor[(12, 64, 512), float32] span=/transformer/h.5/attn/MatMul:0:0 */;
  %401 = reshape(%395, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.5/attn/MatMul:0:0 */;
  %402 = transpose(%400, axes=[0, 2, 1]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.5/attn/MatMul:0:0 */;
  %403 = nn.batch_matmul(%401, %402, out_dtype="float32", transpose_b=True) /* ty=Tensor[(12, 512, 512), float32] span=/transformer/h.5/attn/MatMul:0:0 */;
  %404 = reshape(%403, newshape=[1, 12, 512, 512]) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.5/attn/MatMul:0:0 */;
  %405 = add(%404, meta[relay.Constant][3] /* ty=Tensor[(1, 1, 512, 512), float32] span=/transformer/Expand:0:0 */) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.5/attn/Add:0:0 */;
  %406 = nn.softmax(%405, axis=3) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.5/attn/Softmax:0:0 */;
  %407 = %391.2 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.5/attn/Split:0:0 */;
  %408 = reshape(%407, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.5/attn/Reshape_2:0:0 */;
  %409 = transpose(%408, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.5/attn/Transpose_2:0:0 */;
  %410 = reshape(%409, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.5/attn/MatMul_1:0:0 */;
  %411 = reshape(%406, newshape=[-1, 512, 512]) /* ty=Tensor[(12, 512, 512), float32] span=/transformer/h.5/attn/MatMul_1:0:0 */;
  %412 = transpose(%410, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 512), float32] span=/transformer/h.5/attn/MatMul_1:0:0 */;
  %413 = nn.batch_matmul(%411, %412, out_dtype="float32", transpose_b=True) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.5/attn/MatMul_1:0:0 */;
  %414 = reshape(%413, newshape=[1, 12, 512, 64]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.5/attn/MatMul_1:0:0 */;
  %415 = transpose(%414, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.5/attn/Transpose_4:0:0 */;
  %416 = reshape(%415, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.5/attn/Reshape_3:0:0 */;
  %417 = reshape(%416, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.5/attn/c_proj/Reshape:0:0 */;
  %418 = transpose(%transformer.h.5.attn.c_proj.weight, axes=[1, 0]) /* ty=Tensor[(768, 768), float32] span=/transformer/h.5/attn/c_proj/Gemm:0:0 */;
  %419 = nn.dense(%417, %418, units=768) /* ty=Tensor[(512, 768), float32] span=/transformer/h.5/attn/c_proj/Gemm:0:0 */;
  %420 = add(%419, %transformer.h.5.attn.c_proj.bias) /* ty=Tensor[(512, 768), float32] span=/transformer/h.5/attn/c_proj/Gemm:0:0 */;
  %421 = reshape(%420, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.5/attn/c_proj/Reshape_1:0:0 */;
  %422 = add(%421, %376) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.5/Add:0:0 */;
  %423 = mean(%422, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.5/ln_2/LayerNormalization:0:0 */;
  %424 = variance(%422, %423, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.5/ln_2/LayerNormalization:0:0 */;
  %425 = add(%424, 1e-05f /* ty=float32 span=/transformer/h.5/ln_2/LayerNormalization:0:0 */) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.5/ln_2/LayerNormalization:0:0 */;
  %426 = sqrt(%425) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.5/ln_2/LayerNormalization:0:0 */;
  %427 = subtract(%422, %423) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.5/ln_2/LayerNormalization:0:0 */;
  %428 = divide(1f /* ty=float32 span=/transformer/h.5/ln_2/LayerNormalization:0:0 */, %426) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.5/ln_2/LayerNormalization:0:0 */;
  %429 = multiply(%427, %428) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.5/ln_2/LayerNormalization:0:0 */;
  %430 = multiply(%429, %transformer.h.5.ln_2.weight) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.5/ln_2/LayerNormalization:0:0 */;
  %431 = add(%430, %transformer.h.5.ln_2.bias) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.5/ln_2/LayerNormalization:0:0 */;
  %432 = reshape(%431, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.5/mlp/c_fc/Reshape:0:0 */;
  %433 = transpose(%transformer.h.5.mlp.c_fc.weight, axes=[1, 0]) /* ty=Tensor[(3072, 768), float32] span=/transformer/h.5/mlp/c_fc/Gemm:0:0 */;
  %434 = nn.dense(%432, %433, units=3072) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.5/mlp/c_fc/Gemm:0:0 */;
  %435 = add(%434, %transformer.h.5.mlp.c_fc.bias) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.5/mlp/c_fc/Gemm:0:0 */;
  %436 = reshape(%435, newshape=[1, 512, 3072]) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.5/mlp/c_fc/Reshape_1:0:0 */;
  %437 = power(%436, 3f /* ty=float32 span=/transformer/h.5/mlp/act/Constant_1:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.5/mlp/act/Pow:0:0 */;
  %438 = multiply(%437, 0.044715f /* ty=float32 span=/transformer/h.5/mlp/act/Constant_2:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.5/mlp/act/Mul_1:0:0 */;
  %439 = add(%436, %438) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.5/mlp/act/Add:0:0 */;
  %440 = multiply(%439, 0.797885f /* ty=float32 span=/transformer/h.5/mlp/act/Constant_3:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.5/mlp/act/Mul_2:0:0 */;
  %441 = tanh(%440) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.5/mlp/act/Tanh:0:0 */;
  %442 = multiply(%436, 0.5f /* ty=float32 span=/transformer/h.5/mlp/act/Constant:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.5/mlp/act/Mul:0:0 */;
  %443 = add(%441, 1f /* ty=float32 span=/transformer/h.5/mlp/act/Constant_4:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.5/mlp/act/Add_1:0:0 */;
  %444 = multiply(%442, %443) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.5/mlp/act/Mul_3:0:0 */;
  %445 = reshape(%444, newshape=[-1, 3072]) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.5/mlp/c_proj/Reshape:0:0 */;
  %446 = transpose(%transformer.h.5.mlp.c_proj.weight, axes=[1, 0]) /* ty=Tensor[(768, 3072), float32] span=/transformer/h.5/mlp/c_proj/Gemm:0:0 */;
  %447 = nn.dense(%445, %446, units=768) /* ty=Tensor[(512, 768), float32] span=/transformer/h.5/mlp/c_proj/Gemm:0:0 */;
  %448 = add(%447, %transformer.h.5.mlp.c_proj.bias) /* ty=Tensor[(512, 768), float32] span=/transformer/h.5/mlp/c_proj/Gemm:0:0 */;
  %449 = reshape(%448, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.5/mlp/c_proj/Reshape_1:0:0 */;
  %450 = add(%422, %449) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.5/Add_1:0:0 */;
  %451 = mean(%450, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.6/ln_1/LayerNormalization:0:0 */;
  %452 = variance(%450, %451, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.6/ln_1/LayerNormalization:0:0 */;
  %453 = add(%452, 1e-05f /* ty=float32 span=/transformer/h.6/ln_1/LayerNormalization:0:0 */) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.6/ln_1/LayerNormalization:0:0 */;
  %454 = sqrt(%453) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.6/ln_1/LayerNormalization:0:0 */;
  %455 = subtract(%450, %451) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.6/ln_1/LayerNormalization:0:0 */;
  %456 = divide(1f /* ty=float32 span=/transformer/h.6/ln_1/LayerNormalization:0:0 */, %454) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.6/ln_1/LayerNormalization:0:0 */;
  %457 = multiply(%455, %456) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.6/ln_1/LayerNormalization:0:0 */;
  %458 = multiply(%457, %transformer.h.6.ln_1.weight) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.6/ln_1/LayerNormalization:0:0 */;
  %459 = add(%458, %transformer.h.6.ln_1.bias) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.6/ln_1/LayerNormalization:0:0 */;
  %460 = reshape(%459, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.6/attn/c_attn/Reshape:0:0 */;
  %461 = transpose(%transformer.h.6.attn.c_attn.weight, axes=[1, 0]) /* ty=Tensor[(2304, 768), float32] span=/transformer/h.6/attn/c_attn/Gemm:0:0 */;
  %462 = nn.dense(%460, %461, units=2304) /* ty=Tensor[(512, 2304), float32] span=/transformer/h.6/attn/c_attn/Gemm:0:0 */;
  %463 = add(%462, %transformer.h.6.attn.c_attn.bias) /* ty=Tensor[(512, 2304), float32] span=/transformer/h.6/attn/c_attn/Gemm:0:0 */;
  %464 = reshape(%463, newshape=[1, 512, 2304]) /* ty=Tensor[(1, 512, 2304), float32] span=/transformer/h.6/attn/c_attn/Reshape_1:0:0 */;
  %465 = split(%464, indices_or_sections=[768i64, 1536i64], axis=2) /* ty=(Tensor[(1, 512, 768), float32], Tensor[(1, 512, 768), float32], Tensor[(1, 512, 768), float32]) span=/transformer/h.6/attn/Split:0:0 */;
  %466 = %465.0 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.6/attn/Split:0:0 */;
  %467 = reshape(%466, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.6/attn/Reshape:0:0 */;
  %468 = transpose(%467, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.6/attn/Transpose:0:0 */;
  %469 = multiply(%468, meta[relay.Constant][14] /* ty=Tensor[(1), float32] span=/transformer/h.6/attn/Sqrt_1:0:0 */) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.6/attn/Mul:0:0 */;
  %470 = %465.1 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.6/attn/Split:0:0 */;
  %471 = reshape(%470, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.6/attn/Reshape_1:0:0 */;
  %472 = transpose(%471, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 512), float32] span=/transformer/h.6/attn/Transpose_3:0:0 */;
  %473 = multiply(%472, meta[relay.Constant][15] /* ty=Tensor[(1), float32] span=/transformer/h.6/attn/Sqrt_2:0:0 */) /* ty=Tensor[(1, 12, 64, 512), float32] span=/transformer/h.6/attn/Mul_1:0:0 */;
  %474 = reshape(%473, newshape=[-1, 64, 512]) /* ty=Tensor[(12, 64, 512), float32] span=/transformer/h.6/attn/MatMul:0:0 */;
  %475 = reshape(%469, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.6/attn/MatMul:0:0 */;
  %476 = transpose(%474, axes=[0, 2, 1]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.6/attn/MatMul:0:0 */;
  %477 = nn.batch_matmul(%475, %476, out_dtype="float32", transpose_b=True) /* ty=Tensor[(12, 512, 512), float32] span=/transformer/h.6/attn/MatMul:0:0 */;
  %478 = reshape(%477, newshape=[1, 12, 512, 512]) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.6/attn/MatMul:0:0 */;
  %479 = add(%478, meta[relay.Constant][3] /* ty=Tensor[(1, 1, 512, 512), float32] span=/transformer/Expand:0:0 */) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.6/attn/Add:0:0 */;
  %480 = nn.softmax(%479, axis=3) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.6/attn/Softmax:0:0 */;
  %481 = %465.2 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.6/attn/Split:0:0 */;
  %482 = reshape(%481, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.6/attn/Reshape_2:0:0 */;
  %483 = transpose(%482, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.6/attn/Transpose_2:0:0 */;
  %484 = reshape(%483, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.6/attn/MatMul_1:0:0 */;
  %485 = reshape(%480, newshape=[-1, 512, 512]) /* ty=Tensor[(12, 512, 512), float32] span=/transformer/h.6/attn/MatMul_1:0:0 */;
  %486 = transpose(%484, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 512), float32] span=/transformer/h.6/attn/MatMul_1:0:0 */;
  %487 = nn.batch_matmul(%485, %486, out_dtype="float32", transpose_b=True) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.6/attn/MatMul_1:0:0 */;
  %488 = reshape(%487, newshape=[1, 12, 512, 64]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.6/attn/MatMul_1:0:0 */;
  %489 = transpose(%488, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.6/attn/Transpose_4:0:0 */;
  %490 = reshape(%489, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.6/attn/Reshape_3:0:0 */;
  %491 = reshape(%490, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.6/attn/c_proj/Reshape:0:0 */;
  %492 = transpose(%transformer.h.6.attn.c_proj.weight, axes=[1, 0]) /* ty=Tensor[(768, 768), float32] span=/transformer/h.6/attn/c_proj/Gemm:0:0 */;
  %493 = nn.dense(%491, %492, units=768) /* ty=Tensor[(512, 768), float32] span=/transformer/h.6/attn/c_proj/Gemm:0:0 */;
  %494 = add(%493, %transformer.h.6.attn.c_proj.bias) /* ty=Tensor[(512, 768), float32] span=/transformer/h.6/attn/c_proj/Gemm:0:0 */;
  %495 = reshape(%494, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.6/attn/c_proj/Reshape_1:0:0 */;
  %496 = add(%495, %450) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.6/Add:0:0 */;
  %497 = mean(%496, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.6/ln_2/LayerNormalization:0:0 */;
  %498 = variance(%496, %497, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.6/ln_2/LayerNormalization:0:0 */;
  %499 = add(%498, 1e-05f /* ty=float32 span=/transformer/h.6/ln_2/LayerNormalization:0:0 */) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.6/ln_2/LayerNormalization:0:0 */;
  %500 = sqrt(%499) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.6/ln_2/LayerNormalization:0:0 */;
  %501 = subtract(%496, %497) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.6/ln_2/LayerNormalization:0:0 */;
  %502 = divide(1f /* ty=float32 span=/transformer/h.6/ln_2/LayerNormalization:0:0 */, %500) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.6/ln_2/LayerNormalization:0:0 */;
  %503 = multiply(%501, %502) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.6/ln_2/LayerNormalization:0:0 */;
  %504 = multiply(%503, %transformer.h.6.ln_2.weight) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.6/ln_2/LayerNormalization:0:0 */;
  %505 = add(%504, %transformer.h.6.ln_2.bias) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.6/ln_2/LayerNormalization:0:0 */;
  %506 = reshape(%505, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.6/mlp/c_fc/Reshape:0:0 */;
  %507 = transpose(%transformer.h.6.mlp.c_fc.weight, axes=[1, 0]) /* ty=Tensor[(3072, 768), float32] span=/transformer/h.6/mlp/c_fc/Gemm:0:0 */;
  %508 = nn.dense(%506, %507, units=3072) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.6/mlp/c_fc/Gemm:0:0 */;
  %509 = add(%508, %transformer.h.6.mlp.c_fc.bias) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.6/mlp/c_fc/Gemm:0:0 */;
  %510 = reshape(%509, newshape=[1, 512, 3072]) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.6/mlp/c_fc/Reshape_1:0:0 */;
  %511 = power(%510, 3f /* ty=float32 span=/transformer/h.6/mlp/act/Constant_1:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.6/mlp/act/Pow:0:0 */;
  %512 = multiply(%511, 0.044715f /* ty=float32 span=/transformer/h.6/mlp/act/Constant_2:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.6/mlp/act/Mul_1:0:0 */;
  %513 = add(%510, %512) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.6/mlp/act/Add:0:0 */;
  %514 = multiply(%513, 0.797885f /* ty=float32 span=/transformer/h.6/mlp/act/Constant_3:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.6/mlp/act/Mul_2:0:0 */;
  %515 = tanh(%514) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.6/mlp/act/Tanh:0:0 */;
  %516 = multiply(%510, 0.5f /* ty=float32 span=/transformer/h.6/mlp/act/Constant:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.6/mlp/act/Mul:0:0 */;
  %517 = add(%515, 1f /* ty=float32 span=/transformer/h.6/mlp/act/Constant_4:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.6/mlp/act/Add_1:0:0 */;
  %518 = multiply(%516, %517) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.6/mlp/act/Mul_3:0:0 */;
  %519 = reshape(%518, newshape=[-1, 3072]) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.6/mlp/c_proj/Reshape:0:0 */;
  %520 = transpose(%transformer.h.6.mlp.c_proj.weight, axes=[1, 0]) /* ty=Tensor[(768, 3072), float32] span=/transformer/h.6/mlp/c_proj/Gemm:0:0 */;
  %521 = nn.dense(%519, %520, units=768) /* ty=Tensor[(512, 768), float32] span=/transformer/h.6/mlp/c_proj/Gemm:0:0 */;
  %522 = add(%521, %transformer.h.6.mlp.c_proj.bias) /* ty=Tensor[(512, 768), float32] span=/transformer/h.6/mlp/c_proj/Gemm:0:0 */;
  %523 = reshape(%522, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.6/mlp/c_proj/Reshape_1:0:0 */;
  %524 = add(%496, %523) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.6/Add_1:0:0 */;
  %525 = mean(%524, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.7/ln_1/LayerNormalization:0:0 */;
  %526 = variance(%524, %525, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.7/ln_1/LayerNormalization:0:0 */;
  %527 = add(%526, 1e-05f /* ty=float32 span=/transformer/h.7/ln_1/LayerNormalization:0:0 */) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.7/ln_1/LayerNormalization:0:0 */;
  %528 = sqrt(%527) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.7/ln_1/LayerNormalization:0:0 */;
  %529 = subtract(%524, %525) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.7/ln_1/LayerNormalization:0:0 */;
  %530 = divide(1f /* ty=float32 span=/transformer/h.7/ln_1/LayerNormalization:0:0 */, %528) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.7/ln_1/LayerNormalization:0:0 */;
  %531 = multiply(%529, %530) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.7/ln_1/LayerNormalization:0:0 */;
  %532 = multiply(%531, %transformer.h.7.ln_1.weight) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.7/ln_1/LayerNormalization:0:0 */;
  %533 = add(%532, %transformer.h.7.ln_1.bias) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.7/ln_1/LayerNormalization:0:0 */;
  %534 = reshape(%533, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.7/attn/c_attn/Reshape:0:0 */;
  %535 = transpose(%transformer.h.7.attn.c_attn.weight, axes=[1, 0]) /* ty=Tensor[(2304, 768), float32] span=/transformer/h.7/attn/c_attn/Gemm:0:0 */;
  %536 = nn.dense(%534, %535, units=2304) /* ty=Tensor[(512, 2304), float32] span=/transformer/h.7/attn/c_attn/Gemm:0:0 */;
  %537 = add(%536, %transformer.h.7.attn.c_attn.bias) /* ty=Tensor[(512, 2304), float32] span=/transformer/h.7/attn/c_attn/Gemm:0:0 */;
  %538 = reshape(%537, newshape=[1, 512, 2304]) /* ty=Tensor[(1, 512, 2304), float32] span=/transformer/h.7/attn/c_attn/Reshape_1:0:0 */;
  %539 = split(%538, indices_or_sections=[768i64, 1536i64], axis=2) /* ty=(Tensor[(1, 512, 768), float32], Tensor[(1, 512, 768), float32], Tensor[(1, 512, 768), float32]) span=/transformer/h.7/attn/Split:0:0 */;
  %540 = %539.0 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.7/attn/Split:0:0 */;
  %541 = reshape(%540, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.7/attn/Reshape:0:0 */;
  %542 = transpose(%541, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.7/attn/Transpose:0:0 */;
  %543 = multiply(%542, meta[relay.Constant][16] /* ty=Tensor[(1), float32] span=/transformer/h.7/attn/Sqrt_1:0:0 */) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.7/attn/Mul:0:0 */;
  %544 = %539.1 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.7/attn/Split:0:0 */;
  %545 = reshape(%544, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.7/attn/Reshape_1:0:0 */;
  %546 = transpose(%545, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 512), float32] span=/transformer/h.7/attn/Transpose_3:0:0 */;
  %547 = multiply(%546, meta[relay.Constant][17] /* ty=Tensor[(1), float32] span=/transformer/h.7/attn/Sqrt_2:0:0 */) /* ty=Tensor[(1, 12, 64, 512), float32] span=/transformer/h.7/attn/Mul_1:0:0 */;
  %548 = reshape(%547, newshape=[-1, 64, 512]) /* ty=Tensor[(12, 64, 512), float32] span=/transformer/h.7/attn/MatMul:0:0 */;
  %549 = reshape(%543, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.7/attn/MatMul:0:0 */;
  %550 = transpose(%548, axes=[0, 2, 1]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.7/attn/MatMul:0:0 */;
  %551 = nn.batch_matmul(%549, %550, out_dtype="float32", transpose_b=True) /* ty=Tensor[(12, 512, 512), float32] span=/transformer/h.7/attn/MatMul:0:0 */;
  %552 = reshape(%551, newshape=[1, 12, 512, 512]) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.7/attn/MatMul:0:0 */;
  %553 = add(%552, meta[relay.Constant][3] /* ty=Tensor[(1, 1, 512, 512), float32] span=/transformer/Expand:0:0 */) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.7/attn/Add:0:0 */;
  %554 = nn.softmax(%553, axis=3) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.7/attn/Softmax:0:0 */;
  %555 = %539.2 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.7/attn/Split:0:0 */;
  %556 = reshape(%555, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.7/attn/Reshape_2:0:0 */;
  %557 = transpose(%556, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.7/attn/Transpose_2:0:0 */;
  %558 = reshape(%557, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.7/attn/MatMul_1:0:0 */;
  %559 = reshape(%554, newshape=[-1, 512, 512]) /* ty=Tensor[(12, 512, 512), float32] span=/transformer/h.7/attn/MatMul_1:0:0 */;
  %560 = transpose(%558, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 512), float32] span=/transformer/h.7/attn/MatMul_1:0:0 */;
  %561 = nn.batch_matmul(%559, %560, out_dtype="float32", transpose_b=True) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.7/attn/MatMul_1:0:0 */;
  %562 = reshape(%561, newshape=[1, 12, 512, 64]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.7/attn/MatMul_1:0:0 */;
  %563 = transpose(%562, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.7/attn/Transpose_4:0:0 */;
  %564 = reshape(%563, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.7/attn/Reshape_3:0:0 */;
  %565 = reshape(%564, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.7/attn/c_proj/Reshape:0:0 */;
  %566 = transpose(%transformer.h.7.attn.c_proj.weight, axes=[1, 0]) /* ty=Tensor[(768, 768), float32] span=/transformer/h.7/attn/c_proj/Gemm:0:0 */;
  %567 = nn.dense(%565, %566, units=768) /* ty=Tensor[(512, 768), float32] span=/transformer/h.7/attn/c_proj/Gemm:0:0 */;
  %568 = add(%567, %transformer.h.7.attn.c_proj.bias) /* ty=Tensor[(512, 768), float32] span=/transformer/h.7/attn/c_proj/Gemm:0:0 */;
  %569 = reshape(%568, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.7/attn/c_proj/Reshape_1:0:0 */;
  %570 = add(%569, %524) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.7/Add:0:0 */;
  %571 = mean(%570, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.7/ln_2/LayerNormalization:0:0 */;
  %572 = variance(%570, %571, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.7/ln_2/LayerNormalization:0:0 */;
  %573 = add(%572, 1e-05f /* ty=float32 span=/transformer/h.7/ln_2/LayerNormalization:0:0 */) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.7/ln_2/LayerNormalization:0:0 */;
  %574 = sqrt(%573) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.7/ln_2/LayerNormalization:0:0 */;
  %575 = subtract(%570, %571) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.7/ln_2/LayerNormalization:0:0 */;
  %576 = divide(1f /* ty=float32 span=/transformer/h.7/ln_2/LayerNormalization:0:0 */, %574) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.7/ln_2/LayerNormalization:0:0 */;
  %577 = multiply(%575, %576) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.7/ln_2/LayerNormalization:0:0 */;
  %578 = multiply(%577, %transformer.h.7.ln_2.weight) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.7/ln_2/LayerNormalization:0:0 */;
  %579 = add(%578, %transformer.h.7.ln_2.bias) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.7/ln_2/LayerNormalization:0:0 */;
  %580 = reshape(%579, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.7/mlp/c_fc/Reshape:0:0 */;
  %581 = transpose(%transformer.h.7.mlp.c_fc.weight, axes=[1, 0]) /* ty=Tensor[(3072, 768), float32] span=/transformer/h.7/mlp/c_fc/Gemm:0:0 */;
  %582 = nn.dense(%580, %581, units=3072) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.7/mlp/c_fc/Gemm:0:0 */;
  %583 = add(%582, %transformer.h.7.mlp.c_fc.bias) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.7/mlp/c_fc/Gemm:0:0 */;
  %584 = reshape(%583, newshape=[1, 512, 3072]) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.7/mlp/c_fc/Reshape_1:0:0 */;
  %585 = power(%584, 3f /* ty=float32 span=/transformer/h.7/mlp/act/Constant_1:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.7/mlp/act/Pow:0:0 */;
  %586 = multiply(%585, 0.044715f /* ty=float32 span=/transformer/h.7/mlp/act/Constant_2:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.7/mlp/act/Mul_1:0:0 */;
  %587 = add(%584, %586) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.7/mlp/act/Add:0:0 */;
  %588 = multiply(%587, 0.797885f /* ty=float32 span=/transformer/h.7/mlp/act/Constant_3:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.7/mlp/act/Mul_2:0:0 */;
  %589 = tanh(%588) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.7/mlp/act/Tanh:0:0 */;
  %590 = multiply(%584, 0.5f /* ty=float32 span=/transformer/h.7/mlp/act/Constant:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.7/mlp/act/Mul:0:0 */;
  %591 = add(%589, 1f /* ty=float32 span=/transformer/h.7/mlp/act/Constant_4:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.7/mlp/act/Add_1:0:0 */;
  %592 = multiply(%590, %591) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.7/mlp/act/Mul_3:0:0 */;
  %593 = reshape(%592, newshape=[-1, 3072]) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.7/mlp/c_proj/Reshape:0:0 */;
  %594 = transpose(%transformer.h.7.mlp.c_proj.weight, axes=[1, 0]) /* ty=Tensor[(768, 3072), float32] span=/transformer/h.7/mlp/c_proj/Gemm:0:0 */;
  %595 = nn.dense(%593, %594, units=768) /* ty=Tensor[(512, 768), float32] span=/transformer/h.7/mlp/c_proj/Gemm:0:0 */;
  %596 = add(%595, %transformer.h.7.mlp.c_proj.bias) /* ty=Tensor[(512, 768), float32] span=/transformer/h.7/mlp/c_proj/Gemm:0:0 */;
  %597 = reshape(%596, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.7/mlp/c_proj/Reshape_1:0:0 */;
  %598 = add(%570, %597) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.7/Add_1:0:0 */;
  %599 = mean(%598, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.8/ln_1/LayerNormalization:0:0 */;
  %600 = variance(%598, %599, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.8/ln_1/LayerNormalization:0:0 */;
  %601 = add(%600, 1e-05f /* ty=float32 span=/transformer/h.8/ln_1/LayerNormalization:0:0 */) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.8/ln_1/LayerNormalization:0:0 */;
  %602 = sqrt(%601) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.8/ln_1/LayerNormalization:0:0 */;
  %603 = subtract(%598, %599) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.8/ln_1/LayerNormalization:0:0 */;
  %604 = divide(1f /* ty=float32 span=/transformer/h.8/ln_1/LayerNormalization:0:0 */, %602) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.8/ln_1/LayerNormalization:0:0 */;
  %605 = multiply(%603, %604) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.8/ln_1/LayerNormalization:0:0 */;
  %606 = multiply(%605, %transformer.h.8.ln_1.weight) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.8/ln_1/LayerNormalization:0:0 */;
  %607 = add(%606, %transformer.h.8.ln_1.bias) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.8/ln_1/LayerNormalization:0:0 */;
  %608 = reshape(%607, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.8/attn/c_attn/Reshape:0:0 */;
  %609 = transpose(%transformer.h.8.attn.c_attn.weight, axes=[1, 0]) /* ty=Tensor[(2304, 768), float32] span=/transformer/h.8/attn/c_attn/Gemm:0:0 */;
  %610 = nn.dense(%608, %609, units=2304) /* ty=Tensor[(512, 2304), float32] span=/transformer/h.8/attn/c_attn/Gemm:0:0 */;
  %611 = add(%610, %transformer.h.8.attn.c_attn.bias) /* ty=Tensor[(512, 2304), float32] span=/transformer/h.8/attn/c_attn/Gemm:0:0 */;
  %612 = reshape(%611, newshape=[1, 512, 2304]) /* ty=Tensor[(1, 512, 2304), float32] span=/transformer/h.8/attn/c_attn/Reshape_1:0:0 */;
  %613 = split(%612, indices_or_sections=[768i64, 1536i64], axis=2) /* ty=(Tensor[(1, 512, 768), float32], Tensor[(1, 512, 768), float32], Tensor[(1, 512, 768), float32]) span=/transformer/h.8/attn/Split:0:0 */;
  %614 = %613.0 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.8/attn/Split:0:0 */;
  %615 = reshape(%614, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.8/attn/Reshape:0:0 */;
  %616 = transpose(%615, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.8/attn/Transpose:0:0 */;
  %617 = multiply(%616, meta[relay.Constant][18] /* ty=Tensor[(1), float32] span=/transformer/h.8/attn/Sqrt_1:0:0 */) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.8/attn/Mul:0:0 */;
  %618 = %613.1 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.8/attn/Split:0:0 */;
  %619 = reshape(%618, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.8/attn/Reshape_1:0:0 */;
  %620 = transpose(%619, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 512), float32] span=/transformer/h.8/attn/Transpose_3:0:0 */;
  %621 = multiply(%620, meta[relay.Constant][19] /* ty=Tensor[(1), float32] span=/transformer/h.8/attn/Sqrt_2:0:0 */) /* ty=Tensor[(1, 12, 64, 512), float32] span=/transformer/h.8/attn/Mul_1:0:0 */;
  %622 = reshape(%621, newshape=[-1, 64, 512]) /* ty=Tensor[(12, 64, 512), float32] span=/transformer/h.8/attn/MatMul:0:0 */;
  %623 = reshape(%617, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.8/attn/MatMul:0:0 */;
  %624 = transpose(%622, axes=[0, 2, 1]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.8/attn/MatMul:0:0 */;
  %625 = nn.batch_matmul(%623, %624, out_dtype="float32", transpose_b=True) /* ty=Tensor[(12, 512, 512), float32] span=/transformer/h.8/attn/MatMul:0:0 */;
  %626 = reshape(%625, newshape=[1, 12, 512, 512]) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.8/attn/MatMul:0:0 */;
  %627 = add(%626, meta[relay.Constant][3] /* ty=Tensor[(1, 1, 512, 512), float32] span=/transformer/Expand:0:0 */) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.8/attn/Add:0:0 */;
  %628 = nn.softmax(%627, axis=3) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.8/attn/Softmax:0:0 */;
  %629 = %613.2 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.8/attn/Split:0:0 */;
  %630 = reshape(%629, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.8/attn/Reshape_2:0:0 */;
  %631 = transpose(%630, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.8/attn/Transpose_2:0:0 */;
  %632 = reshape(%631, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.8/attn/MatMul_1:0:0 */;
  %633 = reshape(%628, newshape=[-1, 512, 512]) /* ty=Tensor[(12, 512, 512), float32] span=/transformer/h.8/attn/MatMul_1:0:0 */;
  %634 = transpose(%632, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 512), float32] span=/transformer/h.8/attn/MatMul_1:0:0 */;
  %635 = nn.batch_matmul(%633, %634, out_dtype="float32", transpose_b=True) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.8/attn/MatMul_1:0:0 */;
  %636 = reshape(%635, newshape=[1, 12, 512, 64]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.8/attn/MatMul_1:0:0 */;
  %637 = transpose(%636, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.8/attn/Transpose_4:0:0 */;
  %638 = reshape(%637, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.8/attn/Reshape_3:0:0 */;
  %639 = reshape(%638, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.8/attn/c_proj/Reshape:0:0 */;
  %640 = transpose(%transformer.h.8.attn.c_proj.weight, axes=[1, 0]) /* ty=Tensor[(768, 768), float32] span=/transformer/h.8/attn/c_proj/Gemm:0:0 */;
  %641 = nn.dense(%639, %640, units=768) /* ty=Tensor[(512, 768), float32] span=/transformer/h.8/attn/c_proj/Gemm:0:0 */;
  %642 = add(%641, %transformer.h.8.attn.c_proj.bias) /* ty=Tensor[(512, 768), float32] span=/transformer/h.8/attn/c_proj/Gemm:0:0 */;
  %643 = reshape(%642, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.8/attn/c_proj/Reshape_1:0:0 */;
  %644 = add(%643, %598) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.8/Add:0:0 */;
  %645 = mean(%644, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.8/ln_2/LayerNormalization:0:0 */;
  %646 = variance(%644, %645, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.8/ln_2/LayerNormalization:0:0 */;
  %647 = add(%646, 1e-05f /* ty=float32 span=/transformer/h.8/ln_2/LayerNormalization:0:0 */) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.8/ln_2/LayerNormalization:0:0 */;
  %648 = sqrt(%647) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.8/ln_2/LayerNormalization:0:0 */;
  %649 = subtract(%644, %645) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.8/ln_2/LayerNormalization:0:0 */;
  %650 = divide(1f /* ty=float32 span=/transformer/h.8/ln_2/LayerNormalization:0:0 */, %648) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.8/ln_2/LayerNormalization:0:0 */;
  %651 = multiply(%649, %650) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.8/ln_2/LayerNormalization:0:0 */;
  %652 = multiply(%651, %transformer.h.8.ln_2.weight) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.8/ln_2/LayerNormalization:0:0 */;
  %653 = add(%652, %transformer.h.8.ln_2.bias) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.8/ln_2/LayerNormalization:0:0 */;
  %654 = reshape(%653, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.8/mlp/c_fc/Reshape:0:0 */;
  %655 = transpose(%transformer.h.8.mlp.c_fc.weight, axes=[1, 0]) /* ty=Tensor[(3072, 768), float32] span=/transformer/h.8/mlp/c_fc/Gemm:0:0 */;
  %656 = nn.dense(%654, %655, units=3072) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.8/mlp/c_fc/Gemm:0:0 */;
  %657 = add(%656, %transformer.h.8.mlp.c_fc.bias) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.8/mlp/c_fc/Gemm:0:0 */;
  %658 = reshape(%657, newshape=[1, 512, 3072]) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.8/mlp/c_fc/Reshape_1:0:0 */;
  %659 = power(%658, 3f /* ty=float32 span=/transformer/h.8/mlp/act/Constant_1:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.8/mlp/act/Pow:0:0 */;
  %660 = multiply(%659, 0.044715f /* ty=float32 span=/transformer/h.8/mlp/act/Constant_2:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.8/mlp/act/Mul_1:0:0 */;
  %661 = add(%658, %660) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.8/mlp/act/Add:0:0 */;
  %662 = multiply(%661, 0.797885f /* ty=float32 span=/transformer/h.8/mlp/act/Constant_3:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.8/mlp/act/Mul_2:0:0 */;
  %663 = tanh(%662) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.8/mlp/act/Tanh:0:0 */;
  %664 = multiply(%658, 0.5f /* ty=float32 span=/transformer/h.8/mlp/act/Constant:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.8/mlp/act/Mul:0:0 */;
  %665 = add(%663, 1f /* ty=float32 span=/transformer/h.8/mlp/act/Constant_4:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.8/mlp/act/Add_1:0:0 */;
  %666 = multiply(%664, %665) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.8/mlp/act/Mul_3:0:0 */;
  %667 = reshape(%666, newshape=[-1, 3072]) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.8/mlp/c_proj/Reshape:0:0 */;
  %668 = transpose(%transformer.h.8.mlp.c_proj.weight, axes=[1, 0]) /* ty=Tensor[(768, 3072), float32] span=/transformer/h.8/mlp/c_proj/Gemm:0:0 */;
  %669 = nn.dense(%667, %668, units=768) /* ty=Tensor[(512, 768), float32] span=/transformer/h.8/mlp/c_proj/Gemm:0:0 */;
  %670 = add(%669, %transformer.h.8.mlp.c_proj.bias) /* ty=Tensor[(512, 768), float32] span=/transformer/h.8/mlp/c_proj/Gemm:0:0 */;
  %671 = reshape(%670, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.8/mlp/c_proj/Reshape_1:0:0 */;
  %672 = add(%644, %671) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.8/Add_1:0:0 */;
  %673 = mean(%672, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.9/ln_1/LayerNormalization:0:0 */;
  %674 = variance(%672, %673, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.9/ln_1/LayerNormalization:0:0 */;
  %675 = add(%674, 1e-05f /* ty=float32 span=/transformer/h.9/ln_1/LayerNormalization:0:0 */) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.9/ln_1/LayerNormalization:0:0 */;
  %676 = sqrt(%675) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.9/ln_1/LayerNormalization:0:0 */;
  %677 = subtract(%672, %673) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.9/ln_1/LayerNormalization:0:0 */;
  %678 = divide(1f /* ty=float32 span=/transformer/h.9/ln_1/LayerNormalization:0:0 */, %676) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.9/ln_1/LayerNormalization:0:0 */;
  %679 = multiply(%677, %678) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.9/ln_1/LayerNormalization:0:0 */;
  %680 = multiply(%679, %transformer.h.9.ln_1.weight) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.9/ln_1/LayerNormalization:0:0 */;
  %681 = add(%680, %transformer.h.9.ln_1.bias) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.9/ln_1/LayerNormalization:0:0 */;
  %682 = reshape(%681, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.9/attn/c_attn/Reshape:0:0 */;
  %683 = transpose(%transformer.h.9.attn.c_attn.weight, axes=[1, 0]) /* ty=Tensor[(2304, 768), float32] span=/transformer/h.9/attn/c_attn/Gemm:0:0 */;
  %684 = nn.dense(%682, %683, units=2304) /* ty=Tensor[(512, 2304), float32] span=/transformer/h.9/attn/c_attn/Gemm:0:0 */;
  %685 = add(%684, %transformer.h.9.attn.c_attn.bias) /* ty=Tensor[(512, 2304), float32] span=/transformer/h.9/attn/c_attn/Gemm:0:0 */;
  %686 = reshape(%685, newshape=[1, 512, 2304]) /* ty=Tensor[(1, 512, 2304), float32] span=/transformer/h.9/attn/c_attn/Reshape_1:0:0 */;
  %687 = split(%686, indices_or_sections=[768i64, 1536i64], axis=2) /* ty=(Tensor[(1, 512, 768), float32], Tensor[(1, 512, 768), float32], Tensor[(1, 512, 768), float32]) span=/transformer/h.9/attn/Split:0:0 */;
  %688 = %687.0 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.9/attn/Split:0:0 */;
  %689 = reshape(%688, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.9/attn/Reshape:0:0 */;
  %690 = transpose(%689, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.9/attn/Transpose:0:0 */;
  %691 = multiply(%690, meta[relay.Constant][20] /* ty=Tensor[(1), float32] span=/transformer/h.9/attn/Sqrt_1:0:0 */) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.9/attn/Mul:0:0 */;
  %692 = %687.1 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.9/attn/Split:0:0 */;
  %693 = reshape(%692, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.9/attn/Reshape_1:0:0 */;
  %694 = transpose(%693, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 512), float32] span=/transformer/h.9/attn/Transpose_3:0:0 */;
  %695 = multiply(%694, meta[relay.Constant][21] /* ty=Tensor[(1), float32] span=/transformer/h.9/attn/Sqrt_2:0:0 */) /* ty=Tensor[(1, 12, 64, 512), float32] span=/transformer/h.9/attn/Mul_1:0:0 */;
  %696 = reshape(%695, newshape=[-1, 64, 512]) /* ty=Tensor[(12, 64, 512), float32] span=/transformer/h.9/attn/MatMul:0:0 */;
  %697 = reshape(%691, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.9/attn/MatMul:0:0 */;
  %698 = transpose(%696, axes=[0, 2, 1]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.9/attn/MatMul:0:0 */;
  %699 = nn.batch_matmul(%697, %698, out_dtype="float32", transpose_b=True) /* ty=Tensor[(12, 512, 512), float32] span=/transformer/h.9/attn/MatMul:0:0 */;
  %700 = reshape(%699, newshape=[1, 12, 512, 512]) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.9/attn/MatMul:0:0 */;
  %701 = add(%700, meta[relay.Constant][3] /* ty=Tensor[(1, 1, 512, 512), float32] span=/transformer/Expand:0:0 */) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.9/attn/Add:0:0 */;
  %702 = nn.softmax(%701, axis=3) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.9/attn/Softmax:0:0 */;
  %703 = %687.2 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.9/attn/Split:0:0 */;
  %704 = reshape(%703, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.9/attn/Reshape_2:0:0 */;
  %705 = transpose(%704, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.9/attn/Transpose_2:0:0 */;
  %706 = reshape(%705, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.9/attn/MatMul_1:0:0 */;
  %707 = reshape(%702, newshape=[-1, 512, 512]) /* ty=Tensor[(12, 512, 512), float32] span=/transformer/h.9/attn/MatMul_1:0:0 */;
  %708 = transpose(%706, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 512), float32] span=/transformer/h.9/attn/MatMul_1:0:0 */;
  %709 = nn.batch_matmul(%707, %708, out_dtype="float32", transpose_b=True) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.9/attn/MatMul_1:0:0 */;
  %710 = reshape(%709, newshape=[1, 12, 512, 64]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.9/attn/MatMul_1:0:0 */;
  %711 = transpose(%710, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.9/attn/Transpose_4:0:0 */;
  %712 = reshape(%711, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.9/attn/Reshape_3:0:0 */;
  %713 = reshape(%712, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.9/attn/c_proj/Reshape:0:0 */;
  %714 = transpose(%transformer.h.9.attn.c_proj.weight, axes=[1, 0]) /* ty=Tensor[(768, 768), float32] span=/transformer/h.9/attn/c_proj/Gemm:0:0 */;
  %715 = nn.dense(%713, %714, units=768) /* ty=Tensor[(512, 768), float32] span=/transformer/h.9/attn/c_proj/Gemm:0:0 */;
  %716 = add(%715, %transformer.h.9.attn.c_proj.bias) /* ty=Tensor[(512, 768), float32] span=/transformer/h.9/attn/c_proj/Gemm:0:0 */;
  %717 = reshape(%716, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.9/attn/c_proj/Reshape_1:0:0 */;
  %718 = add(%717, %672) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.9/Add:0:0 */;
  %719 = mean(%718, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.9/ln_2/LayerNormalization:0:0 */;
  %720 = variance(%718, %719, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.9/ln_2/LayerNormalization:0:0 */;
  %721 = add(%720, 1e-05f /* ty=float32 span=/transformer/h.9/ln_2/LayerNormalization:0:0 */) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.9/ln_2/LayerNormalization:0:0 */;
  %722 = sqrt(%721) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.9/ln_2/LayerNormalization:0:0 */;
  %723 = subtract(%718, %719) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.9/ln_2/LayerNormalization:0:0 */;
  %724 = divide(1f /* ty=float32 span=/transformer/h.9/ln_2/LayerNormalization:0:0 */, %722) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.9/ln_2/LayerNormalization:0:0 */;
  %725 = multiply(%723, %724) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.9/ln_2/LayerNormalization:0:0 */;
  %726 = multiply(%725, %transformer.h.9.ln_2.weight) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.9/ln_2/LayerNormalization:0:0 */;
  %727 = add(%726, %transformer.h.9.ln_2.bias) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.9/ln_2/LayerNormalization:0:0 */;
  %728 = reshape(%727, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.9/mlp/c_fc/Reshape:0:0 */;
  %729 = transpose(%transformer.h.9.mlp.c_fc.weight, axes=[1, 0]) /* ty=Tensor[(3072, 768), float32] span=/transformer/h.9/mlp/c_fc/Gemm:0:0 */;
  %730 = nn.dense(%728, %729, units=3072) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.9/mlp/c_fc/Gemm:0:0 */;
  %731 = add(%730, %transformer.h.9.mlp.c_fc.bias) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.9/mlp/c_fc/Gemm:0:0 */;
  %732 = reshape(%731, newshape=[1, 512, 3072]) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.9/mlp/c_fc/Reshape_1:0:0 */;
  %733 = power(%732, 3f /* ty=float32 span=/transformer/h.9/mlp/act/Constant_1:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.9/mlp/act/Pow:0:0 */;
  %734 = multiply(%733, 0.044715f /* ty=float32 span=/transformer/h.9/mlp/act/Constant_2:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.9/mlp/act/Mul_1:0:0 */;
  %735 = add(%732, %734) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.9/mlp/act/Add:0:0 */;
  %736 = multiply(%735, 0.797885f /* ty=float32 span=/transformer/h.9/mlp/act/Constant_3:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.9/mlp/act/Mul_2:0:0 */;
  %737 = tanh(%736) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.9/mlp/act/Tanh:0:0 */;
  %738 = multiply(%732, 0.5f /* ty=float32 span=/transformer/h.9/mlp/act/Constant:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.9/mlp/act/Mul:0:0 */;
  %739 = add(%737, 1f /* ty=float32 span=/transformer/h.9/mlp/act/Constant_4:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.9/mlp/act/Add_1:0:0 */;
  %740 = multiply(%738, %739) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.9/mlp/act/Mul_3:0:0 */;
  %741 = reshape(%740, newshape=[-1, 3072]) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.9/mlp/c_proj/Reshape:0:0 */;
  %742 = transpose(%transformer.h.9.mlp.c_proj.weight, axes=[1, 0]) /* ty=Tensor[(768, 3072), float32] span=/transformer/h.9/mlp/c_proj/Gemm:0:0 */;
  %743 = nn.dense(%741, %742, units=768) /* ty=Tensor[(512, 768), float32] span=/transformer/h.9/mlp/c_proj/Gemm:0:0 */;
  %744 = add(%743, %transformer.h.9.mlp.c_proj.bias) /* ty=Tensor[(512, 768), float32] span=/transformer/h.9/mlp/c_proj/Gemm:0:0 */;
  %745 = reshape(%744, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.9/mlp/c_proj/Reshape_1:0:0 */;
  %746 = add(%718, %745) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.9/Add_1:0:0 */;
  %747 = mean(%746, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.10/ln_1/LayerNormalization:0:0 */;
  %748 = variance(%746, %747, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.10/ln_1/LayerNormalization:0:0 */;
  %749 = add(%748, 1e-05f /* ty=float32 span=/transformer/h.10/ln_1/LayerNormalization:0:0 */) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.10/ln_1/LayerNormalization:0:0 */;
  %750 = sqrt(%749) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.10/ln_1/LayerNormalization:0:0 */;
  %751 = subtract(%746, %747) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.10/ln_1/LayerNormalization:0:0 */;
  %752 = divide(1f /* ty=float32 span=/transformer/h.10/ln_1/LayerNormalization:0:0 */, %750) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.10/ln_1/LayerNormalization:0:0 */;
  %753 = multiply(%751, %752) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.10/ln_1/LayerNormalization:0:0 */;
  %754 = multiply(%753, %transformer.h.10.ln_1.weight) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.10/ln_1/LayerNormalization:0:0 */;
  %755 = add(%754, %transformer.h.10.ln_1.bias) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.10/ln_1/LayerNormalization:0:0 */;
  %756 = reshape(%755, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.10/attn/c_attn/Reshape:0:0 */;
  %757 = transpose(%transformer.h.10.attn.c_attn.weight, axes=[1, 0]) /* ty=Tensor[(2304, 768), float32] span=/transformer/h.10/attn/c_attn/Gemm:0:0 */;
  %758 = nn.dense(%756, %757, units=2304) /* ty=Tensor[(512, 2304), float32] span=/transformer/h.10/attn/c_attn/Gemm:0:0 */;
  %759 = add(%758, %transformer.h.10.attn.c_attn.bias) /* ty=Tensor[(512, 2304), float32] span=/transformer/h.10/attn/c_attn/Gemm:0:0 */;
  %760 = reshape(%759, newshape=[1, 512, 2304]) /* ty=Tensor[(1, 512, 2304), float32] span=/transformer/h.10/attn/c_attn/Reshape_1:0:0 */;
  %761 = split(%760, indices_or_sections=[768i64, 1536i64], axis=2) /* ty=(Tensor[(1, 512, 768), float32], Tensor[(1, 512, 768), float32], Tensor[(1, 512, 768), float32]) span=/transformer/h.10/attn/Split:0:0 */;
  %762 = %761.0 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.10/attn/Split:0:0 */;
  %763 = reshape(%762, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.10/attn/Reshape:0:0 */;
  %764 = transpose(%763, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.10/attn/Transpose:0:0 */;
  %765 = multiply(%764, meta[relay.Constant][22] /* ty=Tensor[(1), float32] span=/transformer/h.10/attn/Sqrt_1:0:0 */) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.10/attn/Mul:0:0 */;
  %766 = %761.1 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.10/attn/Split:0:0 */;
  %767 = reshape(%766, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.10/attn/Reshape_1:0:0 */;
  %768 = transpose(%767, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 512), float32] span=/transformer/h.10/attn/Transpose_3:0:0 */;
  %769 = multiply(%768, meta[relay.Constant][23] /* ty=Tensor[(1), float32] span=/transformer/h.10/attn/Sqrt_2:0:0 */) /* ty=Tensor[(1, 12, 64, 512), float32] span=/transformer/h.10/attn/Mul_1:0:0 */;
  %770 = reshape(%769, newshape=[-1, 64, 512]) /* ty=Tensor[(12, 64, 512), float32] span=/transformer/h.10/attn/MatMul:0:0 */;
  %771 = reshape(%765, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.10/attn/MatMul:0:0 */;
  %772 = transpose(%770, axes=[0, 2, 1]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.10/attn/MatMul:0:0 */;
  %773 = nn.batch_matmul(%771, %772, out_dtype="float32", transpose_b=True) /* ty=Tensor[(12, 512, 512), float32] span=/transformer/h.10/attn/MatMul:0:0 */;
  %774 = reshape(%773, newshape=[1, 12, 512, 512]) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.10/attn/MatMul:0:0 */;
  %775 = add(%774, meta[relay.Constant][3] /* ty=Tensor[(1, 1, 512, 512), float32] span=/transformer/Expand:0:0 */) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.10/attn/Add:0:0 */;
  %776 = nn.softmax(%775, axis=3) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.10/attn/Softmax:0:0 */;
  %777 = %761.2 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.10/attn/Split:0:0 */;
  %778 = reshape(%777, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.10/attn/Reshape_2:0:0 */;
  %779 = transpose(%778, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.10/attn/Transpose_2:0:0 */;
  %780 = reshape(%779, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.10/attn/MatMul_1:0:0 */;
  %781 = reshape(%776, newshape=[-1, 512, 512]) /* ty=Tensor[(12, 512, 512), float32] span=/transformer/h.10/attn/MatMul_1:0:0 */;
  %782 = transpose(%780, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 512), float32] span=/transformer/h.10/attn/MatMul_1:0:0 */;
  %783 = nn.batch_matmul(%781, %782, out_dtype="float32", transpose_b=True) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.10/attn/MatMul_1:0:0 */;
  %784 = reshape(%783, newshape=[1, 12, 512, 64]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.10/attn/MatMul_1:0:0 */;
  %785 = transpose(%784, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.10/attn/Transpose_4:0:0 */;
  %786 = reshape(%785, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.10/attn/Reshape_3:0:0 */;
  %787 = reshape(%786, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.10/attn/c_proj/Reshape:0:0 */;
  %788 = transpose(%transformer.h.10.attn.c_proj.weight, axes=[1, 0]) /* ty=Tensor[(768, 768), float32] span=/transformer/h.10/attn/c_proj/Gemm:0:0 */;
  %789 = nn.dense(%787, %788, units=768) /* ty=Tensor[(512, 768), float32] span=/transformer/h.10/attn/c_proj/Gemm:0:0 */;
  %790 = add(%789, %transformer.h.10.attn.c_proj.bias) /* ty=Tensor[(512, 768), float32] span=/transformer/h.10/attn/c_proj/Gemm:0:0 */;
  %791 = reshape(%790, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.10/attn/c_proj/Reshape_1:0:0 */;
  %792 = add(%791, %746) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.10/Add:0:0 */;
  %793 = mean(%792, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.10/ln_2/LayerNormalization:0:0 */;
  %794 = variance(%792, %793, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.10/ln_2/LayerNormalization:0:0 */;
  %795 = add(%794, 1e-05f /* ty=float32 span=/transformer/h.10/ln_2/LayerNormalization:0:0 */) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.10/ln_2/LayerNormalization:0:0 */;
  %796 = sqrt(%795) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.10/ln_2/LayerNormalization:0:0 */;
  %797 = subtract(%792, %793) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.10/ln_2/LayerNormalization:0:0 */;
  %798 = divide(1f /* ty=float32 span=/transformer/h.10/ln_2/LayerNormalization:0:0 */, %796) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.10/ln_2/LayerNormalization:0:0 */;
  %799 = multiply(%797, %798) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.10/ln_2/LayerNormalization:0:0 */;
  %800 = multiply(%799, %transformer.h.10.ln_2.weight) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.10/ln_2/LayerNormalization:0:0 */;
  %801 = add(%800, %transformer.h.10.ln_2.bias) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.10/ln_2/LayerNormalization:0:0 */;
  %802 = reshape(%801, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.10/mlp/c_fc/Reshape:0:0 */;
  %803 = transpose(%transformer.h.10.mlp.c_fc.weight, axes=[1, 0]) /* ty=Tensor[(3072, 768), float32] span=/transformer/h.10/mlp/c_fc/Gemm:0:0 */;
  %804 = nn.dense(%802, %803, units=3072) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.10/mlp/c_fc/Gemm:0:0 */;
  %805 = add(%804, %transformer.h.10.mlp.c_fc.bias) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.10/mlp/c_fc/Gemm:0:0 */;
  %806 = reshape(%805, newshape=[1, 512, 3072]) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.10/mlp/c_fc/Reshape_1:0:0 */;
  %807 = power(%806, 3f /* ty=float32 span=/transformer/h.10/mlp/act/Constant_1:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.10/mlp/act/Pow:0:0 */;
  %808 = multiply(%807, 0.044715f /* ty=float32 span=/transformer/h.10/mlp/act/Constant_2:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.10/mlp/act/Mul_1:0:0 */;
  %809 = add(%806, %808) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.10/mlp/act/Add:0:0 */;
  %810 = multiply(%809, 0.797885f /* ty=float32 span=/transformer/h.10/mlp/act/Constant_3:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.10/mlp/act/Mul_2:0:0 */;
  %811 = tanh(%810) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.10/mlp/act/Tanh:0:0 */;
  %812 = multiply(%806, 0.5f /* ty=float32 span=/transformer/h.10/mlp/act/Constant:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.10/mlp/act/Mul:0:0 */;
  %813 = add(%811, 1f /* ty=float32 span=/transformer/h.10/mlp/act/Constant_4:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.10/mlp/act/Add_1:0:0 */;
  %814 = multiply(%812, %813) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.10/mlp/act/Mul_3:0:0 */;
  %815 = reshape(%814, newshape=[-1, 3072]) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.10/mlp/c_proj/Reshape:0:0 */;
  %816 = transpose(%transformer.h.10.mlp.c_proj.weight, axes=[1, 0]) /* ty=Tensor[(768, 3072), float32] span=/transformer/h.10/mlp/c_proj/Gemm:0:0 */;
  %817 = nn.dense(%815, %816, units=768) /* ty=Tensor[(512, 768), float32] span=/transformer/h.10/mlp/c_proj/Gemm:0:0 */;
  %818 = add(%817, %transformer.h.10.mlp.c_proj.bias) /* ty=Tensor[(512, 768), float32] span=/transformer/h.10/mlp/c_proj/Gemm:0:0 */;
  %819 = reshape(%818, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.10/mlp/c_proj/Reshape_1:0:0 */;
  %820 = add(%792, %819) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.10/Add_1:0:0 */;
  %821 = mean(%820, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.11/ln_1/LayerNormalization:0:0 */;
  %822 = variance(%820, %821, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.11/ln_1/LayerNormalization:0:0 */;
  %823 = add(%822, 1e-05f /* ty=float32 span=/transformer/h.11/ln_1/LayerNormalization:0:0 */) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.11/ln_1/LayerNormalization:0:0 */;
  %824 = sqrt(%823) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.11/ln_1/LayerNormalization:0:0 */;
  %825 = subtract(%820, %821) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.11/ln_1/LayerNormalization:0:0 */;
  %826 = divide(1f /* ty=float32 span=/transformer/h.11/ln_1/LayerNormalization:0:0 */, %824) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.11/ln_1/LayerNormalization:0:0 */;
  %827 = multiply(%825, %826) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.11/ln_1/LayerNormalization:0:0 */;
  %828 = multiply(%827, %transformer.h.11.ln_1.weight) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.11/ln_1/LayerNormalization:0:0 */;
  %829 = add(%828, %transformer.h.11.ln_1.bias) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.11/ln_1/LayerNormalization:0:0 */;
  %830 = reshape(%829, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.11/attn/c_attn/Reshape:0:0 */;
  %831 = transpose(%transformer.h.11.attn.c_attn.weight, axes=[1, 0]) /* ty=Tensor[(2304, 768), float32] span=/transformer/h.11/attn/c_attn/Gemm:0:0 */;
  %832 = nn.dense(%830, %831, units=2304) /* ty=Tensor[(512, 2304), float32] span=/transformer/h.11/attn/c_attn/Gemm:0:0 */;
  %833 = add(%832, %transformer.h.11.attn.c_attn.bias) /* ty=Tensor[(512, 2304), float32] span=/transformer/h.11/attn/c_attn/Gemm:0:0 */;
  %834 = reshape(%833, newshape=[1, 512, 2304]) /* ty=Tensor[(1, 512, 2304), float32] span=/transformer/h.11/attn/c_attn/Reshape_1:0:0 */;
  %835 = split(%834, indices_or_sections=[768i64, 1536i64], axis=2) /* ty=(Tensor[(1, 512, 768), float32], Tensor[(1, 512, 768), float32], Tensor[(1, 512, 768), float32]) span=/transformer/h.11/attn/Split:0:0 */;
  %836 = %835.0 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.11/attn/Split:0:0 */;
  %837 = reshape(%836, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.11/attn/Reshape:0:0 */;
  %838 = transpose(%837, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.11/attn/Transpose:0:0 */;
  %839 = multiply(%838, meta[relay.Constant][24] /* ty=Tensor[(1), float32] span=/transformer/h.11/attn/Sqrt_1:0:0 */) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.11/attn/Mul:0:0 */;
  %840 = %835.1 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.11/attn/Split:0:0 */;
  %841 = reshape(%840, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.11/attn/Reshape_1:0:0 */;
  %842 = transpose(%841, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 512), float32] span=/transformer/h.11/attn/Transpose_3:0:0 */;
  %843 = multiply(%842, meta[relay.Constant][25] /* ty=Tensor[(1), float32] span=/transformer/h.11/attn/Sqrt_2:0:0 */) /* ty=Tensor[(1, 12, 64, 512), float32] span=/transformer/h.11/attn/Mul_1:0:0 */;
  %844 = reshape(%843, newshape=[-1, 64, 512]) /* ty=Tensor[(12, 64, 512), float32] span=/transformer/h.11/attn/MatMul:0:0 */;
  %845 = reshape(%839, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.11/attn/MatMul:0:0 */;
  %846 = transpose(%844, axes=[0, 2, 1]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.11/attn/MatMul:0:0 */;
  %847 = nn.batch_matmul(%845, %846, out_dtype="float32", transpose_b=True) /* ty=Tensor[(12, 512, 512), float32] span=/transformer/h.11/attn/MatMul:0:0 */;
  %848 = reshape(%847, newshape=[1, 12, 512, 512]) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.11/attn/MatMul:0:0 */;
  %849 = add(%848, meta[relay.Constant][3] /* ty=Tensor[(1, 1, 512, 512), float32] span=/transformer/Expand:0:0 */) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.11/attn/Add:0:0 */;
  %850 = nn.softmax(%849, axis=3) /* ty=Tensor[(1, 12, 512, 512), float32] span=/transformer/h.11/attn/Softmax:0:0 */;
  %851 = %835.2 /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.11/attn/Split:0:0 */;
  %852 = reshape(%851, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.11/attn/Reshape_2:0:0 */;
  %853 = transpose(%852, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.11/attn/Transpose_2:0:0 */;
  %854 = reshape(%853, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.11/attn/MatMul_1:0:0 */;
  %855 = reshape(%850, newshape=[-1, 512, 512]) /* ty=Tensor[(12, 512, 512), float32] span=/transformer/h.11/attn/MatMul_1:0:0 */;
  %856 = transpose(%854, axes=[0, 2, 1]) /* ty=Tensor[(12, 64, 512), float32] span=/transformer/h.11/attn/MatMul_1:0:0 */;
  %857 = nn.batch_matmul(%855, %856, out_dtype="float32", transpose_b=True) /* ty=Tensor[(12, 512, 64), float32] span=/transformer/h.11/attn/MatMul_1:0:0 */;
  %858 = reshape(%857, newshape=[1, 12, 512, 64]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.11/attn/MatMul_1:0:0 */;
  %859 = transpose(%858, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 512, 12, 64), float32] span=/transformer/h.11/attn/Transpose_4:0:0 */;
  %860 = reshape(%859, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.11/attn/Reshape_3:0:0 */;
  %861 = reshape(%860, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.11/attn/c_proj/Reshape:0:0 */;
  %862 = transpose(%transformer.h.11.attn.c_proj.weight, axes=[1, 0]) /* ty=Tensor[(768, 768), float32] span=/transformer/h.11/attn/c_proj/Gemm:0:0 */;
  %863 = nn.dense(%861, %862, units=768) /* ty=Tensor[(512, 768), float32] span=/transformer/h.11/attn/c_proj/Gemm:0:0 */;
  %864 = add(%863, %transformer.h.11.attn.c_proj.bias) /* ty=Tensor[(512, 768), float32] span=/transformer/h.11/attn/c_proj/Gemm:0:0 */;
  %865 = reshape(%864, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.11/attn/c_proj/Reshape_1:0:0 */;
  %866 = add(%865, %820) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.11/Add:0:0 */;
  %867 = mean(%866, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.11/ln_2/LayerNormalization:0:0 */;
  %868 = variance(%866, %867, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.11/ln_2/LayerNormalization:0:0 */;
  %869 = add(%868, 1e-05f /* ty=float32 span=/transformer/h.11/ln_2/LayerNormalization:0:0 */) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.11/ln_2/LayerNormalization:0:0 */;
  %870 = sqrt(%869) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.11/ln_2/LayerNormalization:0:0 */;
  %871 = subtract(%866, %867) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.11/ln_2/LayerNormalization:0:0 */;
  %872 = divide(1f /* ty=float32 span=/transformer/h.11/ln_2/LayerNormalization:0:0 */, %870) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/h.11/ln_2/LayerNormalization:0:0 */;
  %873 = multiply(%871, %872) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.11/ln_2/LayerNormalization:0:0 */;
  %874 = multiply(%873, %transformer.h.11.ln_2.weight) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.11/ln_2/LayerNormalization:0:0 */;
  %875 = add(%874, %transformer.h.11.ln_2.bias) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.11/ln_2/LayerNormalization:0:0 */;
  %876 = reshape(%875, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/transformer/h.11/mlp/c_fc/Reshape:0:0 */;
  %877 = transpose(%transformer.h.11.mlp.c_fc.weight, axes=[1, 0]) /* ty=Tensor[(3072, 768), float32] span=/transformer/h.11/mlp/c_fc/Gemm:0:0 */;
  %878 = nn.dense(%876, %877, units=3072) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.11/mlp/c_fc/Gemm:0:0 */;
  %879 = add(%878, %transformer.h.11.mlp.c_fc.bias) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.11/mlp/c_fc/Gemm:0:0 */;
  %880 = reshape(%879, newshape=[1, 512, 3072]) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.11/mlp/c_fc/Reshape_1:0:0 */;
  %881 = power(%880, 3f /* ty=float32 span=/transformer/h.11/mlp/act/Constant_1:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.11/mlp/act/Pow:0:0 */;
  %882 = multiply(%881, 0.044715f /* ty=float32 span=/transformer/h.11/mlp/act/Constant_2:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.11/mlp/act/Mul_1:0:0 */;
  %883 = add(%880, %882) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.11/mlp/act/Add:0:0 */;
  %884 = multiply(%883, 0.797885f /* ty=float32 span=/transformer/h.11/mlp/act/Constant_3:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.11/mlp/act/Mul_2:0:0 */;
  %885 = tanh(%884) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.11/mlp/act/Tanh:0:0 */;
  %886 = multiply(%880, 0.5f /* ty=float32 span=/transformer/h.11/mlp/act/Constant:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.11/mlp/act/Mul:0:0 */;
  %887 = add(%885, 1f /* ty=float32 span=/transformer/h.11/mlp/act/Constant_4:0:0 */) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.11/mlp/act/Add_1:0:0 */;
  %888 = multiply(%886, %887) /* ty=Tensor[(1, 512, 3072), float32] span=/transformer/h.11/mlp/act/Mul_3:0:0 */;
  %889 = reshape(%888, newshape=[-1, 3072]) /* ty=Tensor[(512, 3072), float32] span=/transformer/h.11/mlp/c_proj/Reshape:0:0 */;
  %890 = transpose(%transformer.h.11.mlp.c_proj.weight, axes=[1, 0]) /* ty=Tensor[(768, 3072), float32] span=/transformer/h.11/mlp/c_proj/Gemm:0:0 */;
  %891 = nn.dense(%889, %890, units=768) /* ty=Tensor[(512, 768), float32] span=/transformer/h.11/mlp/c_proj/Gemm:0:0 */;
  %892 = add(%891, %transformer.h.11.mlp.c_proj.bias) /* ty=Tensor[(512, 768), float32] span=/transformer/h.11/mlp/c_proj/Gemm:0:0 */;
  %893 = reshape(%892, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.11/mlp/c_proj/Reshape_1:0:0 */;
  %894 = add(%866, %893) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/h.11/Add_1:0:0 */;
  %895 = mean(%894, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/ln_f/LayerNormalization:0:0 */;
  %896 = variance(%894, %895, axis=[2], keepdims=True) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/ln_f/LayerNormalization:0:0 */;
  %897 = add(%896, 1e-05f /* ty=float32 span=/transformer/ln_f/LayerNormalization:0:0 */) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/ln_f/LayerNormalization:0:0 */;
  %898 = sqrt(%897) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/ln_f/LayerNormalization:0:0 */;
  %899 = subtract(%894, %895) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/ln_f/LayerNormalization:0:0 */;
  %900 = divide(1f /* ty=float32 span=/transformer/ln_f/LayerNormalization:0:0 */, %898) /* ty=Tensor[(1, 512, 1), float32] span=/transformer/ln_f/LayerNormalization:0:0 */;
  %901 = multiply(%899, %900) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/ln_f/LayerNormalization:0:0 */;
  %902 = multiply(%901, %transformer.ln_f.weight) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/ln_f/LayerNormalization:0:0 */;
  %903 = add(%902, %transformer.ln_f.bias) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/ln_f/LayerNormalization:0:0 */;
  %904 = reshape(%903, newshape=[-1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] span=/transformer/Reshape_1:0:0 */;
  %905 = reshape(%904, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] span=/lm_head/MatMul:0:0 */;
  %906 = transpose(%onnx::MatMul_2714, axes=None) /* ty=Tensor[(50257, 768), float32] span=/lm_head/MatMul:0:0 */;
  %907 = nn.dense(%905, %906, units=None, out_dtype="float32") /* ty=Tensor[(512, 50257), float32] span=/lm_head/MatMul:0:0 */;
  %908 = reshape(%907, newshape=[1, 512, 50257]) /* ty=Tensor[(1, 512, 50257), float32] span=/lm_head/MatMul:0:0 */;
  %909 = transpose(%27, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.0/attn/Transpose_1:0:0 */;
  %910 = transpose(%101, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.1/attn/Transpose_1:0:0 */;
  %911 = transpose(%175, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.2/attn/Transpose_1:0:0 */;
  %912 = transpose(%249, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.3/attn/Transpose_1:0:0 */;
  %913 = transpose(%323, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.4/attn/Transpose_1:0:0 */;
  %914 = transpose(%397, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.5/attn/Transpose_1:0:0 */;
  %915 = transpose(%471, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.6/attn/Transpose_1:0:0 */;
  %916 = transpose(%545, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.7/attn/Transpose_1:0:0 */;
  %917 = transpose(%619, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.8/attn/Transpose_1:0:0 */;
  %918 = transpose(%693, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.9/attn/Transpose_1:0:0 */;
  %919 = transpose(%767, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.10/attn/Transpose_1:0:0 */;
  %920 = transpose(%841, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] span=/transformer/h.11/attn/Transpose_1:0:0 */;
  (%908, %909, %39, %910, %113, %911, %187, %912, %261, %913, %335, %914, %409, %915, %483, %916, %557, %917, %631, %918, %705, %919, %779, %920, %853) /* ty=(Tensor[(1, 512, 50257), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32], Tensor[(1, 12, 512, 64), float32]) */
}

